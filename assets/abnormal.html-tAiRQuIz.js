import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,b as t}from"./app-Vb5gMWuh.js";const n="/backend-book/assets/exception-CpaLaSeR.png",e={},l=t('<h2 id="一、简介" tabindex="-1"><a class="header-anchor" href="#一、简介"><span>一、简介</span></a></h2><p>Java 异常（Exception）是 Java 提供的一种用于处理程序中错误情况的机制。当 Java 程序运行时遇到无法继续执行的情况（如数组越界、空指针引用等），就会抛出（throw）一个异常。异常处理是 Java 编程中非常重要的一部分，它使得程序更加健壮，能够优雅地处理错误情况，而不是直接崩溃。</p><h2 id="二、异常体系" tabindex="-1"><a class="header-anchor" href="#二、异常体系"><span>二、异常体系</span></a></h2><figure><img src="'+n+`" alt="异常体系" tabindex="0" loading="lazy"><figcaption>异常体系</figcaption></figure><p>异常的体系的结构是顶级的类 Throwable，它的子类分为 Error 和 Exception，Error 的错误分为虚拟机错误、内存溢出、线程锁死等。Exception 分为 IoException 和 RuntimeExption。RuntimeExption 又分为 空指针异常、数组下标越界异常、算数异常、类型转换异常等。</p><h2 id="三、异常分类" tabindex="-1"><a class="header-anchor" href="#三、异常分类"><span>三、异常分类</span></a></h2><p>Java 中的异常被分为两大类：检查型异常（Checked Exceptions）和非检查型异常（Unchecked Exceptions）。</p><ol><li><p><strong>检查型异常（Checked Exceptions）</strong>：这类异常在编译时就必须被处理，否则编译器会报错。处理这类异常的方式有两种：使用 <code>try-catch</code> 语句捕获并处理异常，或者使用 <code>throws</code> 关键字声明该方法可能会抛出异常，让方法的调用者来处理。常见的检查型异常有 <code>IOException</code>、<code>SQLException</code> 等。</p></li><li><p><strong>非检查型异常（Unchecked Exceptions）</strong>：这类异常包括运行时异常（<code>RuntimeException</code> 及其子类）和错误（<code>Error</code> 及其子类）。运行时异常在编译时不需要被显式处理，它们通常是由程序逻辑错误引起的，如数组越界、空指针引用等。错误则是由 JVM 抛出的，表示系统级的错误，如 <code>OutOfMemoryError</code>、<code>StackOverflowError</code> 等，这些错误通常无法被恢复或捕获。</p></li></ol><p>Java 异常（Exception）是 Java 提供的一种用于处理程序中错误情况的机制。当 Java 程序运行时遇到无法继续执行的情况（如数组越界、空指针引用等），就会抛出（throw）一个异常。异常处理是 Java 编程中非常重要的一部分，它使得程序更加健壮，能够优雅地处理错误情况，而不是直接崩溃。</p><h2 id="四、异常处理机制" tabindex="-1"><a class="header-anchor" href="#四、异常处理机制"><span>四、异常处理机制</span></a></h2><p>Java 提供了 <code>try-catch-finally</code> 语句来处理异常。</p><ul><li><p><strong>try 块</strong>：用于包裹可能发生异常的代码。</p></li><li><p><strong>catch 块</strong>：用于捕获并处理 try 块中抛出的异常。可以有多个 catch 块来捕获不同类型的异常。</p></li><li><p><strong>finally 块</strong>：无论是否发生异常，finally 块中的代码都会被执行。它通常用于释放资源，如关闭文件流、数据库连接等。</p></li><li><p>示例</p></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 尝试执行的代码</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 这将抛出 ArithmeticException</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ArithmeticException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 处理 ArithmeticException</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;发生除数为0的异常&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 无论是否发生异常，都会执行的代码</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;finally 代码块执行&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、自定义异常" tabindex="-1"><a class="header-anchor" href="#五、自定义异常"><span>五、自定义异常</span></a></h2><p>Java 允许开发者通过继承 <code>Exception</code> 类或其子类来创建自定义异常。自定义异常通常用于表示程序中特有的错误情况。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyCustomException</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyCustomException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(message);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 使用自定义异常</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyCustomException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;这是一个自定义异常&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MyCustomException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过合理使用异常处理机制，可以使 Java 程序更加健壮和易于维护。</p>`,17),h=[l];function p(k,r){return a(),s("div",null,h)}const c=i(e,[["render",p],["__file","abnormal.html.vue"]]),g=JSON.parse('{"path":"/java/base/abnormal.html","title":"【第七篇章】异常","lang":"zh-CN","frontmatter":{"title":"【第七篇章】异常","index":false,"isOriginal":true,"category":"JAVA","tag":"Java基础","date":"2024-08-06T00:00:00.000Z","description":"一、简介 Java 异常（Exception）是 Java 提供的一种用于处理程序中错误情况的机制。当 Java 程序运行时遇到无法继续执行的情况（如数组越界、空指针引用等），就会抛出（throw）一个异常。异常处理是 Java 编程中非常重要的一部分，它使得程序更加健壮，能够优雅地处理错误情况，而不是直接崩溃。 二、异常体系 异常体系异常体系 异常的...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/java/base/abnormal.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"【第七篇章】异常"}],["meta",{"property":"og:description","content":"一、简介 Java 异常（Exception）是 Java 提供的一种用于处理程序中错误情况的机制。当 Java 程序运行时遇到无法继续执行的情况（如数组越界、空指针引用等），就会抛出（throw）一个异常。异常处理是 Java 编程中非常重要的一部分，它使得程序更加健壮，能够优雅地处理错误情况，而不是直接崩溃。 二、异常体系 异常体系异常体系 异常的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-07T11:32:09.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:published_time","content":"2024-08-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-07T11:32:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【第七篇章】异常\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-07T11:32:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、简介","slug":"一、简介","link":"#一、简介","children":[]},{"level":2,"title":"二、异常体系","slug":"二、异常体系","link":"#二、异常体系","children":[]},{"level":2,"title":"三、异常分类","slug":"三、异常分类","link":"#三、异常分类","children":[]},{"level":2,"title":"四、异常处理机制","slug":"四、异常处理机制","link":"#四、异常处理机制","children":[]},{"level":2,"title":"五、自定义异常","slug":"五、自定义异常","link":"#五、自定义异常","children":[]}],"git":{"createdTime":1722921179000,"updatedTime":1723030329000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":3}]},"readingTime":{"minutes":2.86,"words":857},"filePathRelative":"java/base/abnormal.md","localizedDate":"2024年8月6日","excerpt":"<h2>一、简介</h2>\\n<p>Java 异常（Exception）是 Java 提供的一种用于处理程序中错误情况的机制。当 Java 程序运行时遇到无法继续执行的情况（如数组越界、空指针引用等），就会抛出（throw）一个异常。异常处理是 Java 编程中非常重要的一部分，它使得程序更加健壮，能够优雅地处理错误情况，而不是直接崩溃。</p>\\n<h2>二、异常体系</h2>\\n<figure><figcaption>异常体系</figcaption></figure>\\n<p>异常的体系的结构是顶级的类 Throwable，它的子类分为 Error 和 Exception，Error 的错误分为虚拟机错误、内存溢出、线程锁死等。Exception 分为 IoException 和 RuntimeExption。RuntimeExption 又分为 空指针异常、数组下标越界异常、算数异常、类型转换异常等。</p>","autoDesc":true}');export{c as comp,g as data};
