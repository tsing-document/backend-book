import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as l,a as t}from"./app-C8FGTdxv.js";const a={},s=t('<h2 id="一、redis-基本操作" tabindex="-1"><a class="header-anchor" href="#一、redis-基本操作"><span>一、redis 基本操作</span></a></h2><p>1、判断key是否存在</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">exists</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key_name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2、设置key的过期时间</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">expire</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [过期的时间值]（number类型）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3、查看key的过期时间</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ttl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key_name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>4、获取所有的key</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">keys</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="二、五种常用数据类型" tabindex="-1"><a class="header-anchor" href="#二、五种常用数据类型"><span>二、五种常用数据类型</span></a></h2><p><strong>String（字符串）String类型的值最大能存储512M</strong></p><p>字符串类型操作：</p><ul><li>设置值：set key_name value</li><li>获取值：get key_name</li><li>追加字符串，如果当前的key不存在就会创建一个新的key: append key_name value</li><li>获取字符串长度：strlen key_name</li><li>截取字符串：getrange key_name [start index] [end index]</li><li>指定的字符串覆盖给定key所储存的字符串值，覆盖的位置从偏移量 offset(数字类型) 开始：setrange key_name offset value</li><li>为指定的key设置值及其过期时间，如果key已经存在，setex命令将会替换旧的值: setex key_name [expiration time] value</li><li>先获取值再设置值：getset key_name value</li></ul><p>数字类型操作：</p><ul><li>number数字类型自增1：incr key_name</li><li>number数字类型减1：decr key_name</li><li>增加指定的值：incrby key_name [具体的值]number类型</li><li>减少指定的值：decrby key_name key_name [具体的值]number类型</li></ul><p>批量操作：</p><ul><li>批量设置值：mset key_name1 value1 key_name2 value2 key_name3 value3</li><li>批量获取值： <ul><li>方式1: mget key_name1 key_name2 key_name3</li><li>方式2：msetnx key_name1 key_name2 key_name3 //这个是原子性操作，要么全部成功，要么全部失败。</li></ul></li></ul><p><strong>List（集合）</strong></p><ul><li>每个列表可以存储40多亿元素。</li><li>设置值： <ul><li>左边：lpush key_name value</li><li>右边：rpush key_name value</li></ul></li><li>获取值： <ul><li>左边： <ul><li>lrange key_name [start index] [end index]</li><li>lrange key_name 0 -1 获取所有的元素</li></ul></li></ul></li><li>移除数据： <ul><li>左边：lprop key_name</li><li>右边：rprop key_name</li></ul></li><li>根据参数count的值，移除列表中与参数value相等的元素: <ul><li>lrem key_name [count] value <ul><li>count &gt; 0：从表头开始向表尾搜索，移除与value相等的元素，数量为count。</li><li>count &lt; 0：从表尾开始向表头搜索，移除与value相等的元素，数量为count的绝对值。</li><li>count = 0: 移除表中所有与value相等的值。</li></ul></li></ul></li><li>根据索引获取元素：lindex key_name [index]</li><li>获取集合的长度：llen key_name</li><li>替换列表中指定下标的值，如果不存在就会报错：lset key_name [index] value</li><li>在列表的元素前或者后插入元素。当指定元素不存在于列表中时，不执行任何操作。当列表不存在时，被视为空列表，不执行任何操作。如果 key 不是列表类型，返回一个错误: linsert key_name [before] || [after] oldvalue newvalue</li></ul><p><strong>Set（集合）</strong></p><ul><li>设置值：sadd key_name value</li><li>获取值：smembers key_name</li><li>随机从集合中抽取数据：srandmember key_name</li><li>随机从集合中抽取指定个数的数据：srandmemer key_name [number]</li><li>移除元素：srem key_name value</li><li>用于移除集合中的指定key的一个或多个随机元素，移除后会返回移除的元素: spop key_name</li><li>判断值是否在集合中：sismember key_name value</li><li>获取集合中的元素的个数：scard key_name</li><li>集合之间操作： <ul><li>将值移动到另一个集合中：smove oldlist newlist value</li><li>差集：sidff oldlist newlist</li><li>交集：sinter oldlist newlist</li><li>并集：sunion oldlist newlist</li></ul></li></ul><p><strong>Hash（哈希）</strong></p><ul><li>每个Hash可以存储40多亿键值对。</li><li>设置值： <ul><li>方式1：hset key_name filed1 value</li><li>方式2：hsetnx key_name filed1 value //如果不存在则可以设置</li><li>方式3：hsetnx key_name filed1 value //如果存在不能设置</li></ul></li><li>获取值：hget key_name filed1</li><li>获取所有值：hgetall key_name</li><li>删除集合中某一个字段的值：hdel key_name filed1</li><li>获取集合中的元素的个数：hlen key_name</li><li>判断key是否存在：hexists key_name</li><li>获取所有的filed: hkeys key_name</li><li>获取所有的值：hvals key_name</li><li>自增：hincrby key_name filed1 1</li><li>自减：decrby key_name filed1 1</li><li>批量操作： <ul><li>设置值：hmset key_name filed1 value1 filed2 value2</li><li>获取值：hmget key_name filed1 filed2</li></ul></li></ul><p><strong>Zset(有序集合)</strong></p><ul><li>每个集合可以存储40多亿元素。</li><li>设置值（number：排序的标识位，这个可以重复）：zadd key_name [number] value</li><li>设置多个值（number：排序的标识位，这个可以重复）: zadd key_name [number] value2 [number] value3</li><li>获取值：zrange key_name 0 -1</li><li>排序：zrangebysocre key_name -inf +inf</li><li>移除元素：zrem key_name value</li><li>获取集合中元素的数量：zcard key_name</li><li>获取指定区间的成员的数量：zcount key_name [start index] [end index]</li></ul><h2 id="三、三种特殊数据类型" tabindex="-1"><a class="header-anchor" href="#三、三种特殊数据类型"><span>三、三种特殊数据类型</span></a></h2><p><strong>geospatial（地理位置）</strong></p><ul><li>添加城市的位置：geoadd china:city 116.40 39.90 beijing</li><li>获取指定城市的经纬度：geopos china:city beijing chongqing</li><li>获取两人之间的距离：geodist china:city beijing shanghai km</li><li>获取指定半径范围之内的坐标：georadius china:city 110 30 1000 km</li><li>根据元素寻找元素：georeadiusbymember china:city beijing 1000 km</li></ul><p><strong>hyperloglog（优点：占用内存小）</strong></p><ul><li>设置值：PFadd key_name value1 value2 value3 value4 value5 value6</li><li>获取数量：PFCOUNT key_name</li><li>合并两个集合：PFMERGE 新集合 集合2 集合3</li></ul><p><strong>Bitmap（位图）</strong></p><ul><li>记录周一到周五的打卡：setbit sign 0 1 // 0是周几 1 是否打卡</li><li>查看某一天是否打卡：gitbit sign 3</li><li>统计打卡的天数：bitcout sign</li></ul><h2 id="四、服务器操作" tabindex="-1"><a class="header-anchor" href="#四、服务器操作"><span>四、服务器操作</span></a></h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>bgrewriteaof</td><td>异步执行一个AOF文件重写操作</td></tr><tr><td>bgsave</td><td>在后台异步保存当前数据库的数据到磁盘</td></tr><tr><td>client kill [ip port] [ID client-id]</td><td>关闭客户端连接</td></tr><tr><td>client list</td><td>获取连接到服务器的客户端列表</td></tr><tr><td>client getname</td><td>获取连接的名称</td></tr><tr><td>client pause timeout</td><td>在指定时间内终止运行来自客户端的命令</td></tr><tr><td>client setname connection-name</td><td>设置当前连接的名称</td></tr><tr><td>cluster slots</td><td>获取集群节点的映射数组</td></tr><tr><td>dbsize</td><td>返回当前数据库key的数量</td></tr><tr><td>flushall</td><td>删除所有数据库的所有的key</td></tr><tr><td>flushdb</td><td>删除当前数据库的所有的key</td></tr><tr><td>lastsave</td><td>返回最近一次redis成功将数据保存到磁盘上的时间</td></tr><tr><td>save</td><td>同步保存数据到硬盘</td></tr><tr><td>select [numer]</td><td>选择指定的数据库</td></tr></tbody></table>',34),n=[s];function r(d,h){return l(),i("div",null,n)}const o=e(a,[["render",r],["__file","type-server.html.vue"]]),u=JSON.parse('{"path":"/database/redis/type-server.html","title":"【第三篇章】八种数据类型和服务器操作命令","lang":"zh-CN","frontmatter":{"title":"【第三篇章】八种数据类型和服务器操作命令","index":false,"isOriginal":true,"category":"数据库","tag":"redis","date":"2024-08-02T00:00:00.000Z","description":"一、redis 基本操作 1、判断key是否存在 2、设置key的过期时间 3、查看key的过期时间 4、获取所有的key 二、五种常用数据类型 String（字符串）String类型的值最大能存储512M 字符串类型操作： 设置值：set key_name value 获取值：get key_name 追加字符串，如果当前的key不存在就会创建一个新...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/database/redis/type-server.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"【第三篇章】八种数据类型和服务器操作命令"}],["meta",{"property":"og:description","content":"一、redis 基本操作 1、判断key是否存在 2、设置key的过期时间 3、查看key的过期时间 4、获取所有的key 二、五种常用数据类型 String（字符串）String类型的值最大能存储512M 字符串类型操作： 设置值：set key_name value 获取值：get key_name 追加字符串，如果当前的key不存在就会创建一个新..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-01T12:16:19.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:published_time","content":"2024-08-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-01T12:16:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【第三篇章】八种数据类型和服务器操作命令\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-01T12:16:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、redis 基本操作","slug":"一、redis-基本操作","link":"#一、redis-基本操作","children":[]},{"level":2,"title":"二、五种常用数据类型","slug":"二、五种常用数据类型","link":"#二、五种常用数据类型","children":[]},{"level":2,"title":"三、三种特殊数据类型","slug":"三、三种特殊数据类型","link":"#三、三种特殊数据类型","children":[]},{"level":2,"title":"四、服务器操作","slug":"四、服务器操作","link":"#四、服务器操作","children":[]}],"git":{"createdTime":1722514579000,"updatedTime":1722514579000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":1}]},"readingTime":{"minutes":4.86,"words":1458},"filePathRelative":"database/redis/type-server.md","localizedDate":"2024年8月2日","excerpt":"<h2>一、redis 基本操作</h2>\\n<p>1、判断key是否存在</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">exists</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> key_name</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,u as data};
