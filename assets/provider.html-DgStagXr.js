import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,a}from"./app-WyJ_ro7d.js";const t={},n=a(`<p>csdn发布日期：2024-09-18</p><h2 id="一、提供器介绍" tabindex="-1"><a class="header-anchor" href="#一、提供器介绍"><span>一、提供器介绍</span></a></h2><p>你把这个提供器当作 Java 中的 <code>service</code> 层处理核心业务逻辑的即可。</p><h2 id="二、通过-cli-生成-service-层代码" tabindex="-1"><a class="header-anchor" href="#二、通过-cli-生成-service-层代码"><span>二、通过 CLI 生成 service 层代码</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> g</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [name] </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">## 使用这个命令即可</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="三、查看生成的文件" tabindex="-1"><a class="header-anchor" href="#三、查看生成的文件"><span>三、查看生成的文件</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">## demo.service.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Injectable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> }</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;@nestjs/common&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">@Injectable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> class</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> DemoService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Injectable()</code> 装饰器的作用是将元数据声明 <code>DemoService</code> 可由 NestJs Ioc 容器被管理。</p><h2 id="四、对比java中的实体类是怎么样的" tabindex="-1"><a class="header-anchor" href="#四、对比java中的实体类是怎么样的"><span>四、对比Java中的实体类是怎么样的？</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> interface</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> Cat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  age:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  breed:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),l=[n];function h(r,d){return e(),s("div",null,l)}const k=i(t,[["render",h],["__file","provider.html.vue"]]),o=JSON.parse('{"path":"/nestJs/base/provider.html","title":"【第四篇章】提供器","lang":"zh-CN","frontmatter":{"title":"【第四篇章】提供器","index":false,"isOriginal":true,"category":"nestJs","tag":"nestJs基础","date":"2024-09-16T00:00:00.000Z","description":"csdn发布日期：2024-09-18 一、提供器介绍 你把这个提供器当作 Java 中的 service 层处理核心业务逻辑的即可。 二、通过 CLI 生成 service 层代码 三、查看生成的文件 @Injectable() 装饰器的作用是将元数据声明 DemoService 可由 NestJs Ioc 容器被管理。 四、对比Java中的实体类是...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/nestJs/base/provider.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"【第四篇章】提供器"}],["meta",{"property":"og:description","content":"csdn发布日期：2024-09-18 一、提供器介绍 你把这个提供器当作 Java 中的 service 层处理核心业务逻辑的即可。 二、通过 CLI 生成 service 层代码 三、查看生成的文件 @Injectable() 装饰器的作用是将元数据声明 DemoService 可由 NestJs Ioc 容器被管理。 四、对比Java中的实体类是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-18T03:17:32.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"nestJs基础"}],["meta",{"property":"article:published_time","content":"2024-09-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-18T03:17:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【第四篇章】提供器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-18T03:17:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、提供器介绍","slug":"一、提供器介绍","link":"#一、提供器介绍","children":[]},{"level":2,"title":"二、通过 CLI 生成 service 层代码","slug":"二、通过-cli-生成-service-层代码","link":"#二、通过-cli-生成-service-层代码","children":[]},{"level":2,"title":"三、查看生成的文件","slug":"三、查看生成的文件","link":"#三、查看生成的文件","children":[]},{"level":2,"title":"四、对比Java中的实体类是怎么样的？","slug":"四、对比java中的实体类是怎么样的","link":"#四、对比java中的实体类是怎么样的","children":[]}],"git":{"createdTime":1731899852000,"updatedTime":1731899852000,"contributors":[{"name":"tsing-dong","email":"ld320321@163.com","commits":1}]},"readingTime":{"minutes":0.5,"words":150},"filePathRelative":"nestJs/base/provider.md","localizedDate":"2024年9月16日","excerpt":"<p>csdn发布日期：2024-09-18</p>\\n<h2>一、提供器介绍</h2>\\n<p>你把这个提供器当作 Java 中的 <code>service</code> 层处理核心业务逻辑的即可。</p>\\n<h2>二、通过 CLI 生成 service 层代码</h2>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">nest</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> g</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> service</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> [name] </span><span style=\\"--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\\">## 使用这个命令即可</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{k as comp,o as data};
