import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as l}from"./app-DOv9Xyqk.js";const t={};function n(h,i){return l(),e("div",null,i[0]||(i[0]=[a(`<h2 id="一、进门首先说-say-hello" tabindex="-1"><a class="header-anchor" href="#一、进门首先说-say-hello"><span>一、进门首先说 say hello</span></a></h2><p>编写 <code>helloworld.cpp</code> 的文件，具体内容如下：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello, world!&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译文件</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">g++</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> helloworld.cpp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> helloworld</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行文件</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./helloworld</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在控制台上可以看到输出结果</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Hello,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> world!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="二、注释" tabindex="-1"><a class="header-anchor" href="#二、注释"><span>二、注释</span></a></h2><p><code>//</code> 单行注释</p><p><code>/*...*/</code> 多行注释</p><h2 id="三、基本数据类型" tabindex="-1"><a class="header-anchor" href="#三、基本数据类型"><span>三、基本数据类型</span></a></h2><ul><li>布尔类型：bool</li><li>字符型：char</li><li>整型：int</li><li>浮点型：float</li><li>无类型：void</li><li>宽字符型：wchat_t</li></ul><h2 id="四、类型修饰符" tabindex="-1"><a class="header-anchor" href="#四、类型修饰符"><span>四、类型修饰符</span></a></h2><ul><li>有符号类型（默认）：signed int x = -10;</li><li>无符号类型：unsigned int y = 10;</li><li>短整型：short int z = 100;</li><li>长整型：long int a = 100000;</li><li>常量，值不可更改：const int b = 5;</li><li>变量可能被意外修改，禁止编译器优化： volatile int c = 10;</li><li>类成员可以在 const 对象中修改：mutable int counter;</li></ul><h2 id="五、派生数据类型" tabindex="-1"><a class="header-anchor" href="#五、派生数据类型"><span>五、派生数据类型</span></a></h2><ul><li>数组：相同类型元素的集合：<code>int arr[5] = {1, 2, 3, 4, 5};</code></li><li>指针：存储变量内存地址的类型：<code>int* ptr = &amp;x;</code></li><li>引用：变量的别名：<code>int&amp; ref = x;</code></li><li>函数：函数类型，表示函数的签名： <code>int func(int a, int b);</code></li><li>结构体：用户定义的数据类型，可以包含多个不同类型的成员：<code>struct Point { int x; int y};</code></li><li>类：用户定义的数据类型，支持封装、继承、多态：<code>class MyClass {...};</code></li><li>联合体：多个成员共享一块内存：<code>union Data { int i; int f}</code></li><li>枚举：用户自定义的整数常量集合： <code>enum Color { RED, GREEN, BLUE}</code></li></ul><h2 id="六、类型别名" tabindex="-1"><a class="header-anchor" href="#六、类型别名"><span>六、类型别名</span></a></h2><ul><li>为现有类型定义别名：typedef ：<code>typedef int MyInt</code></li><li>为现有类型定义别名：using: <code>using MyInt = int</code></li></ul><h2 id="七、标准库类型" tabindex="-1"><a class="header-anchor" href="#七、标准库类型"><span>七、标准库类型</span></a></h2><ul><li>字符串类型：std::string：<code>std:string s = &quot;Hello&quot;;</code></li><li>动态数组：std::vector: <code>std::vector&lt;int&gt; v = {1, 2, 3};</code></li><li>固定大小数组：std::array: <code>std::array&lt;int, 3&gt; a = {1, 2, 3};</code></li><li>存储两个值的容器：std::pair: <code>std::pair&lt;int, float&gt; p(1, 2.0);</code></li><li>键值对容器：std:map: <code>std::map&lt;int, std::string&gt; m;</code></li><li>唯一值集合：<code>std::set&lt;int&gt; s = {1, 2, 3};</code></li></ul>`,22)]))}const p=s(t,[["render",n],["__file","introduce.html.vue"]]),o=JSON.parse('{"path":"/c/base/introduce.html","title":"【第一篇章】 初识","lang":"zh-CN","frontmatter":{"title":"【第一篇章】 初识","index":false,"isOriginal":true,"category":"c++","tag":"c++","date":"2025-02-08T00:00:00.000Z","description":"一、进门首先说 say hello 编写 helloworld.cpp 的文件，具体内容如下： 编译文件 运行文件 在控制台上可以看到输出结果 二、注释 // 单行注释 /*...*/ 多行注释 三、基本数据类型 布尔类型：bool 字符型：char 整型：int 浮点型：float 无类型：void 宽字符型：wchat_t 四、类型修饰符 有符号类...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/c/base/introduce.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"【第一篇章】 初识"}],["meta",{"property":"og:description","content":"一、进门首先说 say hello 编写 helloworld.cpp 的文件，具体内容如下： 编译文件 运行文件 在控制台上可以看到输出结果 二、注释 // 单行注释 /*...*/ 多行注释 三、基本数据类型 布尔类型：bool 字符型：char 整型：int 浮点型：float 无类型：void 宽字符型：wchat_t 四、类型修饰符 有符号类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-10T03:34:15.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"c++"}],["meta",{"property":"article:published_time","content":"2025-02-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-10T03:34:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【第一篇章】 初识\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-10T03:34:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、进门首先说 say hello","slug":"一、进门首先说-say-hello","link":"#一、进门首先说-say-hello","children":[]},{"level":2,"title":"二、注释","slug":"二、注释","link":"#二、注释","children":[]},{"level":2,"title":"三、基本数据类型","slug":"三、基本数据类型","link":"#三、基本数据类型","children":[]},{"level":2,"title":"四、类型修饰符","slug":"四、类型修饰符","link":"#四、类型修饰符","children":[]},{"level":2,"title":"五、派生数据类型","slug":"五、派生数据类型","link":"#五、派生数据类型","children":[]},{"level":2,"title":"六、类型别名","slug":"六、类型别名","link":"#六、类型别名","children":[]},{"level":2,"title":"七、标准库类型","slug":"七、标准库类型","link":"#七、标准库类型","children":[]}],"git":{"createdTime":1739002187000,"updatedTime":1739158455000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":2}]},"readingTime":{"minutes":1.66,"words":497},"filePathRelative":"c/base/introduce.md","localizedDate":"2025年2月8日","excerpt":"<h2>一、进门首先说 say hello</h2>\\n<p>编写 <code>helloworld.cpp</code> 的文件，具体内容如下：</p>\\n<div class=\\"language-c++ line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c++\\" data-title=\\"c++\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">#include</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> &lt;iostream&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">using</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> namespace</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> std</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> main</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    cout </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">&lt;&lt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> \\"Hello, world!\\"</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> &lt;&lt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    return</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 0</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{p as comp,o as data};
