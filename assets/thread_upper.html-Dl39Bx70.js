import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-BY-Ndgag.js";const e={};function t(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h2 id="一、线程和进程的区别" tabindex="-1"><a class="header-anchor" href="#一、线程和进程的区别"><span>一、线程和进程的区别？</span></a></h2><p>进程和线程是操作系统中的两个重要概念，它们之间存在着明显的区别。以下是对进程和线程区别的详细阐述：</p><p>1、定义与基本单位</p><ul><li><strong>进程（Process）</strong>：进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。它是程序的一次执行，可以包含多个线程。每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销。</li><li><strong>线程（Thread）</strong>：线程是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位。线程是处理器（CPU）任务调度和执行的基本单位，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小。</li></ul><p>2、独立性与资源共享</p><ul><li><strong>进程</strong>：进程是相对独立的，每个进程都有自己的内存空间、文件描述符等资源，进程之间的通信需要通过显式的机制，如管道、消息队列和共享内存等来实现。进程切换开销较大，因为需要保存和恢复整个进程的上下文。</li><li><strong>线程</strong>：线程是进程的一部分，用于实现并发和并行操作。线程共享进程的地址空间和资源，包括文件描述符和内存。因此，线程之间的通信更加方便和快捷，可以直接读写进程共享的数据。线程切换的开销较小，因为只需要保存和恢复线程的上下文。</li></ul><p>3、管理与调度</p><ul><li><strong>进程</strong>：进程的管理相对复杂，需要操作系统的支持。进程的创建和销毁都需要操作系统进行资源分配和回收。进程的调度由操作系统根据一定的调度算法进行，以确保系统的公平性和效率。</li><li><strong>线程</strong>：线程的管理更为灵活，线程的创建和销毁相对简单，可以由应用程序自行控制。线程的调度也由操作系统进行，但由于线程共享进程的地址空间，因此线程的调度开销较小。</li></ul><p>4、并发与并行</p><ul><li><strong>进程</strong>：进程可以并发执行，即多个进程可以在同一时间段内交替执行，但每个进程在某一时刻只能占用一个CPU。进程之间的并发执行可以提高系统的资源利用率和吞吐量。</li><li><strong>线程</strong>：线程不仅可以并发执行，还可以并行执行。在多核或多CPU的计算机上，多个线程可以同时执行，从而提高程序的执行效率。此外，线程还可以用于实现任务的分解和并行处理，以进一步提高程序的性能。</li></ul><p>5、健壮性</p><ul><li><strong>进程</strong>：由于进程之间是相互独立的，一个进程的崩溃通常不会影响到其他进程的运行。因此，多进程系统通常比多线程系统更加健壮。</li><li><strong>线程</strong>：线程共享进程的地址空间和资源，因此一个线程的崩溃可能会导致整个进程的崩溃。这要求程序员在编写多线程程序时需要更加注意线程之间的同步和互斥问题，以确保程序的稳定性和可靠性。</li></ul><p>综上所述，进程和线程在定义、独立性、资源共享、管理与调度、并发与并行以及健壮性等方面都存在明显的区别。了解这些区别对于编写高效、安全和可靠的程序至关重要。</p><h2 id="二、什么是多线程切换" tabindex="-1"><a class="header-anchor" href="#二、什么是多线程切换"><span>二、什么是多线程切换？</span></a></h2><p>多线程会共同使用一组计算机上的 CPU, 而线程数大于给程序分配的 CPU 数时，为了让各个线程都有执行的机会，就需要轮换使用 CPU，不同的线程切换使用 CPU 时发生的切换过程就是上下文切换。</p><h2 id="三、死锁和活锁的区别-死锁和饥饿的区别" tabindex="-1"><a class="header-anchor" href="#三、死锁和活锁的区别-死锁和饥饿的区别"><span>三、死锁和活锁的区别，死锁和饥饿的区别？</span></a></h2><p>1、死锁</p><p>是指两个或两个以上的进程（或线程）在执行过程中，因抢夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。产生死锁的必要条件：</p><ul><li>互斥条件：所谓互斥就是进程在某一段时间内独占资源。</li><li>请求和保持条件：一个进程因请求资源而阻塞时，对方获得的资源保持不放。</li><li>不剥夺条件：进程已获得资源，在未使用完之前，不能强行剥夺。</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li></ul><p>2、活锁</p><p>任务或执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试，失败，尝试，失败。</p><p>活锁和死锁的区别在于，处于活锁的实体是在不断的改变状态，所谓的 <code>活</code>；处于死锁的实体表现为等待；活锁有可能自行解开，死锁不能。</p><p>3、饥饿</p><p>一个或者多个线程因为种种原因无法获得所需要的资源，导致一直无法执行的状态。Java 中导致饥饿的原因：</p><ul><li>高于优先级线程吞噬所有的低优先级线程的 CPU 时间。</li><li>线程被永久堵塞在一个等待进入同步块的状态，因为其他线程总是能在它之前持续的对该同步块进行访问。</li><li>线程在等待一个本身也处于永久等待完成的对象（比如调用这个对象的 wait 方法）因为其他线程总是被持续的获得、唤醒。</li></ul><h2 id="四、为什么我们调用-start-方法时会执行-run-方法-为什么不能直接调用-run-方法" tabindex="-1"><a class="header-anchor" href="#四、为什么我们调用-start-方法时会执行-run-方法-为什么不能直接调用-run-方法"><span>四、为什么我们调用 start() 方法时会执行 run() 方法，为什么不能直接调用 run() 方法？</span></a></h2><p>当调用 <code>run()</code> 方法时会创建新的线程，并且执行在 <code>run()</code> 方法里的代码。但是如果直接调用 <code>run()</code> 方法，它不会创建新的线程也不会执行调用线程的代码，只会把它当作一个普通方法来执行。</p><h2 id="五、线程的五种基本状态" tabindex="-1"><a class="header-anchor" href="#五、线程的五种基本状态"><span>五、线程的五种基本状态</span></a></h2><p>1、新建状态（New）：当线程对象创建后，即进入了新建状态，如：<code>Thread t = new Thread()</code>。</p><p>2、就绪状态（Runnable）：当调用线程对象的 <code>start()</code> 方法，线程即进入就绪状态。处于就绪状态的线程，只是说明此线程已经做好准备，随时等待 CPU 调度执行，并不是说执行了 <code>start()</code> 方法此线程立即就会被执行。</p><p>3、运行状态（Running）: 当 CPU 开始调度处于就绪状态的线程时，此时线程才能得以真正的运行，即进入运行状态。注意，就绪状态时进入运行状态的唯一入口，也就是说，线程想要进入运行状态执行，必须处于就绪状态中。</p><p>4、阻塞状态（Blocked）：处于运行状态的线程由于某种原因，暂时放弃对 CPU 的使用权，停止执行。此时进入阻塞状态，直到其进入就绪状态才有机会再次被 CPU 调用进行运行状态。根据阻塞产生的不同原因，阻塞线程又可以分为三种状态：</p><ul><li>等待阻塞：运行状态中的线程执行 <code>wait()</code> 方法，使本线程进入等待阻塞状态。</li><li>同步阻塞：线程在获取 <code>synchronized</code> 同步锁失败（因为锁被其他线程所占用），它就会进入同步阻塞状态。</li><li>其他阻塞：通过调用线程的 <code>sleep()</code> 或者 <code>join()</code> 或发出 <code>I/O</code> 请求时，线程就会进入到阻塞状态。当 <code>sleep()</code> 状态超时时、<code>join()</code> 等待线程终止或者超市、或者 <code>I/O</code> 处理完毕时，线程重新转入就绪状态。</li></ul><p>5、死亡状态（Dead）： 线程执行完了或者因异常退出了 <code>run()</code> 方法，该线程结束生命周期。</p><h2 id="六、synchronized-的作用" tabindex="-1"><a class="header-anchor" href="#六、synchronized-的作用"><span>六、synchronized 的作用？</span></a></h2><p>在 JAVA 中 synchronized 关键字时用来控制线程同步的，就是在多线程环境下，控制 synchronized 代码段不被多个线程同时执行。synchronized 可以加在一段代码上，也可以加在方法上面。</p><h2 id="七、线程池" tabindex="-1"><a class="header-anchor" href="#七、线程池"><span>七、线程池</span></a></h2><p>Java 中的线程池是一个非常重要的概念，它用于管理一组工作线程，这些线程可以重复执行提交给它们的任务。使用线程池可以显著降低资源消耗、提高系统响应速度、增强系统稳定性，同时还可以有效地控制系统中并发线程的数量。</p><p>Java 中实现线程池主要通过 <code>java.util.concurrent</code> 包下的 <code>ExecutorService</code> 接口，<code>Executors</code> 类提供了几种静态工厂方法来创建不同类型的线程池。</p><h3 id="常见的线程池类型" tabindex="-1"><a class="header-anchor" href="#常见的线程池类型"><span>常见的线程池类型</span></a></h3><p>1、<strong>FixedThreadPool（固定大小线程池）</strong></p><ul><li>创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。</li><li>使用场景：适用于负载比较重的服务器，为了资源的合理利用，限制线程的数量。</li><li>示例代码：<code>ExecutorService executor = Executors.newFixedThreadPool(nThreads);</code></li></ul><p>2、<strong>CachedThreadPool（可缓存线程池）</strong></p><ul><li>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li><li>使用场景：适用于执行大量的短时间异步任务。</li><li>示例代码：<code>ExecutorService executor = Executors.newCachedThreadPool();</code></li></ul><p>3、<strong>SingleThreadExecutor（单线程化的Executor）</strong></p><ul><li>创建一个单线程的线程池，它用唯一的工作线程来执行任务，保证所有任务按照指定顺序（FIFO, LIFO, 优先级）执行。</li><li>使用场景：适用于需要顺序地执行各个任务并且不希望多个线程同时访问共享资源的情况。</li><li>示例代码：<code>ExecutorService executor = Executors.newSingleThreadExecutor();</code></li></ul><p>4、<strong>ScheduledThreadPool（定时/周期任务执行的线程池）</strong></p><ul><li>创建一个定长线程池，支持定时及周期性任务执行。</li><li>使用场景：需要按照指定时间间隔或延迟后执行任务的场景。</li><li>示例代码：<code>ScheduledExecutorService executor = Executors.newScheduledThreadPool(nThreads);</code></li></ul><h3 id="线程池的使用" tabindex="-1"><a class="header-anchor" href="#线程池的使用"><span>线程池的使用</span></a></h3><p>1、<strong>提交任务</strong></p><ul><li>通过 <code>execute(Runnable command)</code> 方法提交任务给线程池执行。</li><li>对于 <code>ScheduledThreadPool</code>，可以使用 <code>schedule(Runnable command, long delay, TimeUnit unit)</code> 或 <code>scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)</code> 等方法提交定时或周期任务。</li></ul><p>2、<strong>关闭线程池</strong></p><ul><li>使用 <code>shutdown()</code> 方法来平滑地关闭ExecutorService，不再接受新任务，但是已经提交的任务会继续执行。</li><li>使用 <code>shutdownNow()</code> 方法尝试立即停止所有正在执行的任务，停止处理正在等待的任务，并返回等待执行的任务列表。</li></ul><p>3、<strong>等待任务完成</strong></p><ul><li>调用 <code>awaitTermination(long timeout, TimeUnit unit)</code> 可以阻塞当前线程直到所有任务完成或被终止，或者直到超时期满，或者线程被中断，取决于哪个事件先发生。</li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ul><li>线程池中的线程数量应该根据任务的性质、执行时间、系统资源等因素进行合理设置。</li><li>线程池中的任务应该是相互独立的，避免共享数据导致线程安全问题。</li><li>线程池不应该被随意创建和销毁，以避免资源浪费。</li><li>合理使用线程池的状态和关闭方法，确保线程池资源得到正确释放。</li></ul><p>在Java中，线程池的使用是一个从简单到复杂逐步深入的过程。下面我将通过一个从简单到复杂的示例来展示线程池的使用，并且会提供一个涉及对象处理的案例。</p><h3 id="简单示例-使用fixedthreadpool" tabindex="-1"><a class="header-anchor" href="#简单示例-使用fixedthreadpool"><span>简单示例：使用<code>FixedThreadPool</code></span></a></h3><p>在这个简单的例子中，我们将使用<code>Executors.newFixedThreadPool(int nThreads)</code>来创建一个固定大小的线程池，并提交一些简单的任务。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.concurrent.ExecutorService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.concurrent.Executors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SimpleThreadPoolExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 创建一个固定大小为5的线程池</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ExecutorService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> executor</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Executors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newFixedThreadPool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 提交任务</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> taskId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            executor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">execute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">currentThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; 正在执行任务 &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> taskId);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 关闭线程池（不再接受新任务，但已提交的任务会继续执行）</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        executor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shutdown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="复杂示例-使用threadpoolexecutor处理对象" tabindex="-1"><a class="header-anchor" href="#复杂示例-使用threadpoolexecutor处理对象"><span>复杂示例：使用<code>ThreadPoolExecutor</code>处理对象</span></a></h3><p>在这个例子中，我们将使用<code>ThreadPoolExecutor</code>直接构造一个线程池，并处理一些包含对象的任务。我们将创建一个简单的<code>Task</code>类，该类包含执行逻辑和与之关联的对象数据。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.concurrent.ExecutorService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.concurrent.Executors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.concurrent.ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.concurrent.TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Task</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">currentThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; 正在处理数据: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 模拟任务执行时间</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">currentThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">interrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ComplexThreadPoolExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 使用ThreadPoolExecutor直接创建线程池</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ExecutorService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> executor</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">                5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 核心线程数</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">                10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 最大线程数</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">                60L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 空闲线程存活时间</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">util</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">concurrent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ArrayBlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 等待队列</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                Executors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">defaultThreadFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 线程工厂</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> java.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">util</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">concurrent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">DiscardOldestPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 拒绝策略</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        );</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 提交任务</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            executor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">execute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;任务&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 关闭线程池</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        executor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shutdown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 等待所有任务完成</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">executor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isTerminated</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 等待线程池中的任务完成</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;所有任务执行完成&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>Task</code>类是一个实现了<code>Runnable</code>接口的类，它接受一个字符串数据并在其<code>run</code>方法中处理这些数据。我们创建了一个<code>ThreadPoolExecutor</code>实例，它允许我们更细致地控制线程池的行为，包括核心线程数、最大线程数、空闲线程的存活时间、任务队列、线程工厂以及拒绝策略等。</p><p>通过提交多个<code>Task</code>实例给线程池，我们展示了如何在线程池中处理包含对象数据的任务。最后，我们等待所有任务完成并打印了一条消息。</p><p>这两个示例从简单到复杂地展示了如何在Java中使用线程池，并演示了如何处理包含对象数据的任务。</p>`,67)]))}const r=s(e,[["render",t],["__file","thread_upper.html.vue"]]),d=JSON.parse('{"path":"/interview/thread/thread_upper.html","title":"⚔java多线程面试题总结(上)","lang":"zh-CN","frontmatter":{"title":"⚔java多线程面试题总结(上)","index":false,"isOriginal":true,"category":"面试宝典","tag":"java","date":"2024-08-12T00:00:00.000Z","description":"一、线程和进程的区别？ 进程和线程是操作系统中的两个重要概念，它们之间存在着明显的区别。以下是对进程和线程区别的详细阐述： 1、定义与基本单位 进程（Process）：进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。它是程序的一次执行，可以包含多个线程。每个进程都有独立的代码和数据空间（程序...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/interview/thread/thread_upper.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"⚔java多线程面试题总结(上)"}],["meta",{"property":"og:description","content":"一、线程和进程的区别？ 进程和线程是操作系统中的两个重要概念，它们之间存在着明显的区别。以下是对进程和线程区别的详细阐述： 1、定义与基本单位 进程（Process）：进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。它是程序的一次执行，可以包含多个线程。每个进程都有独立的代码和数据空间（程序..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-15T16:40:21.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-08-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-15T16:40:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"⚔java多线程面试题总结(上)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-15T16:40:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、线程和进程的区别？","slug":"一、线程和进程的区别","link":"#一、线程和进程的区别","children":[]},{"level":2,"title":"二、什么是多线程切换？","slug":"二、什么是多线程切换","link":"#二、什么是多线程切换","children":[]},{"level":2,"title":"三、死锁和活锁的区别，死锁和饥饿的区别？","slug":"三、死锁和活锁的区别-死锁和饥饿的区别","link":"#三、死锁和活锁的区别-死锁和饥饿的区别","children":[]},{"level":2,"title":"四、为什么我们调用 start() 方法时会执行 run() 方法，为什么不能直接调用 run() 方法？","slug":"四、为什么我们调用-start-方法时会执行-run-方法-为什么不能直接调用-run-方法","link":"#四、为什么我们调用-start-方法时会执行-run-方法-为什么不能直接调用-run-方法","children":[]},{"level":2,"title":"五、线程的五种基本状态","slug":"五、线程的五种基本状态","link":"#五、线程的五种基本状态","children":[]},{"level":2,"title":"六、synchronized 的作用？","slug":"六、synchronized-的作用","link":"#六、synchronized-的作用","children":[]},{"level":2,"title":"七、线程池","slug":"七、线程池","link":"#七、线程池","children":[{"level":3,"title":"常见的线程池类型","slug":"常见的线程池类型","link":"#常见的线程池类型","children":[]},{"level":3,"title":"线程池的使用","slug":"线程池的使用","link":"#线程池的使用","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":3,"title":"简单示例：使用FixedThreadPool","slug":"简单示例-使用fixedthreadpool","link":"#简单示例-使用fixedthreadpool","children":[]},{"level":3,"title":"复杂示例：使用ThreadPoolExecutor处理对象","slug":"复杂示例-使用threadpoolexecutor处理对象","link":"#复杂示例-使用threadpoolexecutor处理对象","children":[]}]}],"git":{"createdTime":1723445611000,"updatedTime":1723740021000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":2}]},"readingTime":{"minutes":12.12,"words":3637},"filePathRelative":"interview/thread/thread_upper.md","localizedDate":"2024年8月12日","excerpt":"<h2>一、线程和进程的区别？</h2>\\n<p>进程和线程是操作系统中的两个重要概念，它们之间存在着明显的区别。以下是对进程和线程区别的详细阐述：</p>\\n<p>1、定义与基本单位</p>\\n<ul>\\n<li><strong>进程（Process）</strong>：进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。它是程序的一次执行，可以包含多个线程。每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销。</li>\\n<li><strong>线程（Thread）</strong>：线程是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位。线程是处理器（CPU）任务调度和执行的基本单位，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小。</li>\\n</ul>","autoDesc":true}');export{r as comp,d as data};
