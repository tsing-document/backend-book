import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a,o as r}from"./app-DoWmMSsQ.js";const l={};function t(o,e){return r(),i("div",null,e[0]||(e[0]=[a('<h2 id="一、什么是-spring-框架" tabindex="-1"><a class="header-anchor" href="#一、什么是-spring-框架"><span>一、什么是 Spring 框架？</span></a></h2><p>Spring 框架是一个为 Java 应用程序的开发提供了综合、广泛的基础性支持的 Java 平台。 Spring 帮助开发者解决基础性的问题，使开发者专注编写业务代码。</p><h2 id="二、spring-freamework-有哪些功能" tabindex="-1"><a class="header-anchor" href="#二、spring-freamework-有哪些功能"><span>二、Spring Freamework 有哪些功能？</span></a></h2><ul><li>IOC: 控制反转</li><li>AOP: 面向切面可以将应用业务逻辑和系统服务分离，以实现高内聚。</li><li>容器：Spring 负责创建和管理对象的声明周期和配置。</li><li>MVC: 对 web 应用提供了高度可配置性，其他框架集成也十分方便。</li><li>事务管理：提供了用于事务管理的通用抽象层。Spring 的事务支持也可用于容器较少的环境。</li><li>JDBC异常：Spring 的 JDBC 抽象层提供了一个异常层次结构，简化了错误处理策略。</li></ul><h2 id="三、什么是-spring-ioc-容器" tabindex="-1"><a class="header-anchor" href="#三、什么是-spring-ioc-容器"><span>三、什么是 Spring Ioc 容器？</span></a></h2><p>Spring 框架的核心是 Spring 容器。容器创建对象，将它们装配在一起，配置它们并管理它们的完整生命周期。Spring 容器使用依赖注入来管理组成应用程序的组件。容器通过读取提供的配置元数据来接收对象实例化，配置和组装的指令。</p><h2 id="四、依赖注入的方式有哪几种" tabindex="-1"><a class="header-anchor" href="#四、依赖注入的方式有哪几种"><span>四、依赖注入的方式有哪几种？</span></a></h2><ul><li>构造函数注入</li><li>setter 注入</li><li>接口注入</li></ul><h2 id="五、ioc-的好处和实现机制" tabindex="-1"><a class="header-anchor" href="#五、ioc-的好处和实现机制"><span>五、IOC 的好处和实现机制</span></a></h2><p>它将最小化应用程序中的代码量；它以最小的影响和最少的侵入机制促进松耦合；它支持即时实例化和延迟加载服务。</p><p>Spring 中 IOC 的实现原理就是工程模式加反射机制。</p><h2 id="六、-compoent、-controller、-repository、-service-有何区别" tabindex="-1"><a class="header-anchor" href="#六、-compoent、-controller、-repository、-service-有何区别"><span>六、@Compoent、@Controller、@Repository、@Service 有何区别？</span></a></h2><ul><li><p>@Compoent：这个注解是将类标记为 bean。它是任何 Spring 管理组件的通用构造型。Spring 的组件扫描机制现在可以将其拾取并将拉入应用程序环境中。</p></li><li><p>@Controller：这将一个类标记为 Spring Web MVC 控制器。标有它的 Bean 会自动导入到 IOC 容器中。</p></li><li><p>@Service：此注解是组件注解的特化。它不会对 <code>@Compoent</code> 注解提供任何其他行为。你可以在服务层类中使用它，而不是 <code>@Compoent</code>，因为它以更好的方式指名了意图。</p></li><li><p>@Repository：这个注解是具有类似用途何和功能的 <code>@Compoent</code> 注解的特化。它为 DAO 提供了额外的好处。它即将 DAO 导入 IOC 容器，并使未检查的异常有资格转换为 Spring DataAccessException。</p></li></ul><h2 id="七、-autowired-注解有什么用" tabindex="-1"><a class="header-anchor" href="#七、-autowired-注解有什么用"><span>七、@Autowired 注解有什么用？</span></a></h2><p>它可以准确的控制应该在何处以及如何进行自动装配。此注解用于在 setter 方法，构造函数，具有任意名称或多个参数的属性或者方法上自动装配 bean。默认情况下，它是类型驱动的注入。</p><h2 id="八、spring-支持的事务管理类型" tabindex="-1"><a class="header-anchor" href="#八、spring-支持的事务管理类型"><span>八、spring 支持的事务管理类型</span></a></h2><ul><li><p>程序化事务管理：在此过程中，在变成的帮助下管理事务，它为程序员提供了极大的灵活性。但是维护起来非常困难。</p></li><li><p>声明式事务管理：在此，事务管理和业务代码分离。仅使用注解或基于 XML 的配置来管理事务。</p></li></ul><h2 id="九、beanfactory-和-applicationcontext-有什么区别" tabindex="-1"><a class="header-anchor" href="#九、beanfactory-和-applicationcontext-有什么区别"><span>九、BeanFactory 和 ApplicationContext 有什么区别?</span></a></h2><p>BeanFactory 和 ApplicationContext 是 Spring 框架中的两个核心接口，它们都可以作为 Spring 的容器，但存在多方面的区别。以下是对两者区别的详细分析：</p><h3 id="_1、概念与功能" tabindex="-1"><a class="header-anchor" href="#_1、概念与功能"><span>1、概念与功能</span></a></h3><p><strong>BeanFactory</strong>：</p><ul><li>是 Spring 框架中最底层的接口，是 IOC（控制反转）的核心。</li><li>提供了 Bean 的创建、配置、初始化和销毁等基本操作。</li><li>功能包括 Bean 的定义、加载、实例化、依赖注入和生命周期的管理。</li><li>主要面向 Spring 框架本身，是 Spring 的基础设施。</li></ul><p><strong>ApplicationContext</strong>：</p><ul><li>继承自 BeanFactory 接口，除了包含 BeanFactory 的所有功能外，还提供了更多扩展功能。</li><li>支持国际化、资源文件访问（如URL和文件）、事件传播等。</li><li>面向使用 Spring框架 的开发者，提供了更完整的框架功能。</li><li>被推荐为Java EE应用的首选容器。</li></ul><h3 id="_2、加载机制" tabindex="-1"><a class="header-anchor" href="#_2、加载机制"><span>2、加载机制</span></a></h3><p><strong>BeanFactory</strong>：</p><ul><li>采用延时加载（Lazy Loading）机制，即在容器启动时不会注入 Bean，而是在需要使用Bean 的时候，才会对该 Bean 进行加载和实例化。</li><li>如果 Bean 的某个属性没有注入，BeanFactory 加载时不会抛出异常，直至第一次调用<code>getBean()</code> 方法时才会抛出异常。</li></ul><p><strong>ApplicationContext</strong>：</p><ul><li>在容器启动时，一次性创建并初始化所有的 Bean，因此运行时的速度相对 BeanFactory 较快。</li><li>在容器启动时就可以发现 Spring 配置文件中存在的问题，有利于检测依赖属性是否注入。</li><li>由于一次性加载所有 Bean，可能会导致内存占用较多，尤其是在 Bean 数量较多时，会影响程序的启动速度。</li></ul><h3 id="_3、创建与注册方式" tabindex="-1"><a class="header-anchor" href="#_3、创建与注册方式"><span>3、创建与注册方式</span></a></h3><p><strong>BeanFactory</strong>：</p><ul><li>通常以编程的方式创建，如使用 <code>XmlBeanFactory</code> 或 <code>DefaultListableBeanFactory</code> 等实现类。</li><li>需要手动注册 BeanPostProcessor 和 BeanFactoryPostProcessor 等。</li></ul><p><strong>ApplicationContext</strong>：</p><ul><li>以声明的方式创建，如使用 <code>ClassPathXmlApplicationContext</code>、 <code>FileSystemXmlApplicationContext</code> 等实现类。</li><li>自动注册 BeanPostProcessor 和 BeanFactoryPostProcessor 等，简化了配置过程。</li></ul><h2 id="十、spring-bean-的声明周期" tabindex="-1"><a class="header-anchor" href="#十、spring-bean-的声明周期"><span>十、Spring Bean 的声明周期</span></a></h2><p>Spring Bean的生命周期是指从Bean的创建、初始化到销毁的整个过程，这个过程由Spring IoC容器（Inversion of Control，控制反转容器）控制。Spring Bean的生命周期可以大致分为几个主要阶段，每个阶段都包含特定的操作和回调点，允许开发者在Bean的生命周期中的不同点插入自定义逻辑。以下是对Spring Bean生命周期的详细解释：</p><h3 id="_1、bean元信息配置阶段" tabindex="-1"><a class="header-anchor" href="#_1、bean元信息配置阶段"><span>1、Bean元信息配置阶段</span></a></h3><ul><li><strong>定义Bean信息</strong>：通过XML配置文件、注解（如<code>@Component</code>、<code>@Service</code>等）、Java代码（使用<code>@Bean</code>注解）或properties文件等方式定义Bean的信息。</li><li><strong>解析Bean信息</strong>：Spring容器启动时，会解析这些配置信息，将其转换为内部的<code>BeanDefinition</code>对象。<code>BeanDefinition</code>包含了Bean的元数据信息，如类名、作用域、依赖关系等。</li></ul><h3 id="_2、bean注册阶段" tabindex="-1"><a class="header-anchor" href="#_2、bean注册阶段"><span>2、Bean注册阶段</span></a></h3><ul><li><strong>注册Bean到容器</strong>：解析后的<code>BeanDefinition</code>对象会被注册到Spring IoC容器中，容器会维护一个Bean定义的注册表，用于后续的Bean实例化和依赖注入。</li></ul><h3 id="_3、bean实例化阶段" tabindex="-1"><a class="header-anchor" href="#_3、bean实例化阶段"><span>3、Bean实例化阶段</span></a></h3><ul><li><strong>实例化前阶段</strong>：在Bean实例化之前，可能会进行一些前置处理，如检查Bean的依赖项是否已准备好。</li><li><strong>实例化阶段</strong>：根据<code>BeanDefinition</code>中的信息，使用反射机制创建Bean的实例。对于单例Bean，Spring容器会缓存这个实例，以便后续请求时直接返回。</li></ul><h3 id="_4、属性赋值阶段" tabindex="-1"><a class="header-anchor" href="#_4、属性赋值阶段"><span>4、属性赋值阶段</span></a></h3><ul><li><strong>实例化后阶段</strong>：Bean实例化完成后，但属性还未赋值之前，可能会进行一些额外的处理。</li><li><strong>属性赋值前阶段</strong>：设置Bean的属性值之前，可能需要进行一些准备工作。</li><li><strong>属性赋值阶段</strong>：Spring根据<code>BeanDefinition</code>中的依赖信息，通过依赖注入的方式为Bean的属性赋值。这包括通过构造函数注入、Setter方法注入等方式。</li></ul><h3 id="_5、初始化阶段" tabindex="-1"><a class="header-anchor" href="#_5、初始化阶段"><span>5、初始化阶段</span></a></h3><ul><li><strong>Aware接口回调阶段</strong>：如果Bean实现了特定的Aware接口（如<code>BeanNameAware</code>、<code>BeanFactoryAware</code>、<code>ApplicationContextAware</code>等），Spring容器会回调这些接口的相应方法，将容器相关的信息注入到Bean中。</li><li><strong>初始化前阶段</strong>：在Bean正式初始化之前，可能会执行一些前置处理逻辑。</li><li><strong>初始化阶段</strong>： <ul><li>如果Bean实现了<code>InitializingBean</code>接口，会调用其<code>afterPropertiesSet()</code>方法。</li><li>如果在Bean配置中指定了<code>init-method</code>，则会调用该方法。</li></ul></li><li><strong>初始化后阶段</strong>：Bean初始化完成后，可能会执行一些后置处理逻辑。</li></ul><h3 id="_6、使用阶段" tabindex="-1"><a class="header-anchor" href="#_6、使用阶段"><span>6、使用阶段</span></a></h3><ul><li><strong>Bean的使用</strong>：初始化完成后，Bean就可以被应用程序使用了。Spring容器负责维护Bean的实例，并根据需要将其注入到其他Bean中。</li></ul><h3 id="_7、销毁阶段" tabindex="-1"><a class="header-anchor" href="#_7、销毁阶段"><span>7、销毁阶段</span></a></h3><ul><li><strong>销毁前阶段</strong>：在Bean销毁之前，可能会执行一些清理工作。</li><li><strong>销毁阶段</strong>： <ul><li>如果Bean实现了<code>DisposableBean</code>接口，会调用其<code>destroy()</code>方法。</li><li>如果在Bean配置中指定了<code>destroy-method</code>，则会调用该方法。</li><li>对于单例Bean，Spring容器关闭时会自动调用这些销毁方法。</li></ul></li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Spring Bean的生命周期是一个从定义到销毁的完整过程，其中包含了多个阶段和回调点。通过在这些回调点插入自定义逻辑，开发者可以对Bean的生命周期进行精细控制，以满足复杂的应用需求。</p>',52)]))}const c=n(l,[["render",t],["__file","spring_center.html.vue"]]),d=JSON.parse('{"path":"/interview/spring/spring_center.html","title":"🌿面试总结(中)","lang":"zh-CN","frontmatter":{"title":"🌿面试总结(中)","index":false,"isOriginal":true,"category":"面试宝典","tag":"spring","date":"2024-08-13T00:00:00.000Z","description":"一、什么是 Spring 框架？ Spring 框架是一个为 Java 应用程序的开发提供了综合、广泛的基础性支持的 Java 平台。 Spring 帮助开发者解决基础性的问题，使开发者专注编写业务代码。 二、Spring Freamework 有哪些功能？ IOC: 控制反转 AOP: 面向切面可以将应用业务逻辑和系统服务分离，以实现高内聚。 容器：...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/interview/spring/spring_center.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"🌿面试总结(中)"}],["meta",{"property":"og:description","content":"一、什么是 Spring 框架？ Spring 框架是一个为 Java 应用程序的开发提供了综合、广泛的基础性支持的 Java 平台。 Spring 帮助开发者解决基础性的问题，使开发者专注编写业务代码。 二、Spring Freamework 有哪些功能？ IOC: 控制反转 AOP: 面向切面可以将应用业务逻辑和系统服务分离，以实现高内聚。 容器：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-14T07:55:16.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:published_time","content":"2024-08-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-14T07:55:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"🌿面试总结(中)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-14T07:55:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、什么是 Spring 框架？","slug":"一、什么是-spring-框架","link":"#一、什么是-spring-框架","children":[]},{"level":2,"title":"二、Spring Freamework 有哪些功能？","slug":"二、spring-freamework-有哪些功能","link":"#二、spring-freamework-有哪些功能","children":[]},{"level":2,"title":"三、什么是 Spring Ioc 容器？","slug":"三、什么是-spring-ioc-容器","link":"#三、什么是-spring-ioc-容器","children":[]},{"level":2,"title":"四、依赖注入的方式有哪几种？","slug":"四、依赖注入的方式有哪几种","link":"#四、依赖注入的方式有哪几种","children":[]},{"level":2,"title":"五、IOC 的好处和实现机制","slug":"五、ioc-的好处和实现机制","link":"#五、ioc-的好处和实现机制","children":[]},{"level":2,"title":"六、@Compoent、@Controller、@Repository、@Service 有何区别？","slug":"六、-compoent、-controller、-repository、-service-有何区别","link":"#六、-compoent、-controller、-repository、-service-有何区别","children":[]},{"level":2,"title":"七、@Autowired 注解有什么用？","slug":"七、-autowired-注解有什么用","link":"#七、-autowired-注解有什么用","children":[]},{"level":2,"title":"八、spring 支持的事务管理类型","slug":"八、spring-支持的事务管理类型","link":"#八、spring-支持的事务管理类型","children":[]},{"level":2,"title":"九、BeanFactory 和 ApplicationContext 有什么区别?","slug":"九、beanfactory-和-applicationcontext-有什么区别","link":"#九、beanfactory-和-applicationcontext-有什么区别","children":[{"level":3,"title":"1、概念与功能","slug":"_1、概念与功能","link":"#_1、概念与功能","children":[]},{"level":3,"title":"2、加载机制","slug":"_2、加载机制","link":"#_2、加载机制","children":[]},{"level":3,"title":"3、创建与注册方式","slug":"_3、创建与注册方式","link":"#_3、创建与注册方式","children":[]}]},{"level":2,"title":"十、Spring Bean 的声明周期","slug":"十、spring-bean-的声明周期","link":"#十、spring-bean-的声明周期","children":[{"level":3,"title":"1、Bean元信息配置阶段","slug":"_1、bean元信息配置阶段","link":"#_1、bean元信息配置阶段","children":[]},{"level":3,"title":"2、Bean注册阶段","slug":"_2、bean注册阶段","link":"#_2、bean注册阶段","children":[]},{"level":3,"title":"3、Bean实例化阶段","slug":"_3、bean实例化阶段","link":"#_3、bean实例化阶段","children":[]},{"level":3,"title":"4、属性赋值阶段","slug":"_4、属性赋值阶段","link":"#_4、属性赋值阶段","children":[]},{"level":3,"title":"5、初始化阶段","slug":"_5、初始化阶段","link":"#_5、初始化阶段","children":[]},{"level":3,"title":"6、使用阶段","slug":"_6、使用阶段","link":"#_6、使用阶段","children":[]},{"level":3,"title":"7、销毁阶段","slug":"_7、销毁阶段","link":"#_7、销毁阶段","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1723622116000,"updatedTime":1723622116000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":1}]},"readingTime":{"minutes":7.32,"words":2196},"filePathRelative":"interview/spring/spring_center.md","localizedDate":"2024年8月13日","excerpt":"<h2>一、什么是 Spring 框架？</h2>\\n<p>Spring 框架是一个为 Java 应用程序的开发提供了综合、广泛的基础性支持的 Java 平台。\\nSpring 帮助开发者解决基础性的问题，使开发者专注编写业务代码。</p>\\n<h2>二、Spring Freamework 有哪些功能？</h2>\\n<ul>\\n<li>IOC: 控制反转</li>\\n<li>AOP: 面向切面可以将应用业务逻辑和系统服务分离，以实现高内聚。</li>\\n<li>容器：Spring 负责创建和管理对象的声明周期和配置。</li>\\n<li>MVC: 对 web 应用提供了高度可配置性，其他框架集成也十分方便。</li>\\n<li>事务管理：提供了用于事务管理的通用抽象层。Spring 的事务支持也可用于容器较少的环境。</li>\\n<li>JDBC异常：Spring 的 JDBC 抽象层提供了一个异常层次结构，简化了错误处理策略。</li>\\n</ul>","autoDesc":true}');export{c as comp,d as data};
