import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as n,a}from"./app-H1bCOjiV.js";const i={},l=a(`<h2 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述"><span>一、概述</span></a></h2><p>Redis 基础的数据类型有五种，分别是：String（字符串）、Hash（哈希）、List（列表）、Set（集合）、Zset（有序集合）。</p><h2 id="二、实际的应用场景之string-字符串" tabindex="-1"><a class="header-anchor" href="#二、实际的应用场景之string-字符串"><span>二、实际的应用场景之String（字符串）</span></a></h2><p>1、定义</p><p>string 是 redis 最基本的类型，一个 key 对应一个 value。string 类型是二进制安全的。因为 string 底层的实现是简单动态字符串 sds，是可以修改字符串。</p><p>2、应用场景</p><p>单值缓存、对象缓存、分布式锁、常规计数（粉丝数量、评论数量）、分布式session共享、分布式全局序列号。</p><p>3、具体实现<br><code>单值缓存</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  set key value</span></span>
<span class="line"><span>  get key</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>对象缓存</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  set user:1 value(json格式数据)</span></span>
<span class="line"><span>  mset user:1:name tsingli user:1:balance 1888</span></span>
<span class="line"><span>  mget user:1:name user:1:balance</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>常规计数器</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  incr article:readcount:{文章id}</span></span>
<span class="line"><span>  get article:readcount:{文章id}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>分布式系统全局序列号</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  incrby orderid 1000  # redis批量生成序列号提升性能</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>分布式锁</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  # 相关操作</span></span>
<span class="line"><span>  线程1： setnx product:1001 true # 返回1代表获取锁成功</span></span>
<span class="line"><span>  线程2： setnx product:1001 true # 返回0代表获取锁失败</span></span>
<span class="line"><span>  。。。执行业务操作</span></span>
<span class="line"><span>  del product:1001               # 执行完业务释放锁</span></span>
<span class="line"><span>  set product:1001 true ex 10 nx # 防止程序意外终止导致死锁</span></span>
<span class="line"><span> </span></span>
<span class="line"><span> # 案例</span></span>
<span class="line"><span>    setnx product:1001 true</span></span>
<span class="line"><span>         1.查询商品1001的库存</span></span>
<span class="line"><span>         2.减库存</span></span>
<span class="line"><span>         3.重新把减完剩余的库存更新回数据库</span></span>
<span class="line"><span>    del product:1001</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>setnx 如果插入的key一样不会对数据有任何操作，如果第二次对库存再进行减对的话就返回错误。</p><h2 id="三、实际的应用场景之hash-哈希" tabindex="-1"><a class="header-anchor" href="#三、实际的应用场景之hash-哈希"><span>三、实际的应用场景之Hash（哈希）</span></a></h2><p>1、定义</p><p>Hash是一个键值对集合。他相当于java中的双重map。&lt;key,&lt;filed,value&gt;&gt;。</p><p>2、应用场景</p><p>购物车</p><p>3、具体实现</p><p><code>购物车</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  # 说明：</span></span>
<span class="line"><span>    # 用户id为1001，商品的编码是10088。</span></span>
<span class="line"><span>    # 用户id为key，商品id为field，商品数量为value。</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>  # 案例：</span></span>
<span class="line"><span>     # 添加商品：</span></span>
<span class="line"><span>        hset cart:1001 10088 1</span></span>
<span class="line"><span>     # 增加数量：</span></span>
<span class="line"><span>        hincrby cart:1001 10088 1</span></span>
<span class="line"><span>     # 商品总数：</span></span>
<span class="line"><span>        hlen cart:1001</span></span>
<span class="line"><span>     # 删除商品：</span></span>
<span class="line"><span>        hdel cart:1001 10088</span></span>
<span class="line"><span>     # 获取购物车所有商品：</span></span>
<span class="line"><span>        hgetall cart:1001</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、实际的应用场景之list-列表" tabindex="-1"><a class="header-anchor" href="#四、实际的应用场景之list-列表"><span>四、实际的应用场景之List（列表）</span></a></h2><p>1、定义</p><p>列表是简单的字符串列表，按照插入顺序排序，可以添加一个元素在列表的头部或者尾部。</p><p>2、应用场景</p><p><code>Stack（栈）= LPUSH + LPOP -&gt; FILO //先进后出</code>、<code>Queue（队列）= LPUSH + RPOP //先进先出</code>、<code>Blocking MQ（阻塞队列）= LPUSH + BRPOP //消息队列</code>、<code>微博</code>、<code>微信公众号消息流</code>。</p><p>3、具体实现</p><p><code>微博和微信公众号消息流：</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  # 李雷发微博，消息id为10018</span></span>
<span class="line"><span>      lpush msg:111111 10018</span></span>
<span class="line"><span>  # 韩梅梅车发微博，消息id为10086</span></span>
<span class="line"><span>      lpush msg:111111 10086</span></span>
<span class="line"><span>  # 查看最新微博消息</span></span>
<span class="line"><span>      lrange msg:11111 0 5 //0至5条微博消息。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、实际的应用场景之set-集合" tabindex="-1"><a class="header-anchor" href="#五、实际的应用场景之set-集合"><span>五、实际的应用场景之Set（集合）</span></a></h2><p>1、定义</p><p>Set 是 string 类型的无序集合。</p><p>2、应用场景</p><p>微信抽奖小程序、<code>微信微博点赞、收藏、标签</code>、关注模型，就是可能认识的人的关系。</p><p>3、具体实现</p><p><code>微信抽奖</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  # 点击参与抽奖加入集合</span></span>
<span class="line"><span>      sadd key {userId}</span></span>
<span class="line"><span>  # 查看参与抽奖的所有用户</span></span>
<span class="line"><span>      smembers key</span></span>
<span class="line"><span>  # 抽取count名中奖者（1） // srandmember不会将元素从集合中删除</span></span>
<span class="line"><span>      srandmember key [count] //抽取两名中奖者 srandmember act:1008 2</span></span>
<span class="line"><span>  # 抽取count名中奖者（2） // SPOP会将元素从集合中删除</span></span>
<span class="line"><span>      spop key 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>微信微博点赞、收藏、标签</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  # 点赞</span></span>
<span class="line"><span>    sadd like:{消息ID} {用户id}</span></span>
<span class="line"><span>  # 取消点赞</span></span>
<span class="line"><span>    srem like:{消息ID} {用户id}</span></span>
<span class="line"><span>  # 检查用户是否点过赞</span></span>
<span class="line"><span>    sismember like:{消息ID} {用户id}</span></span>
<span class="line"><span>  # 获取点赞的用户列表</span></span>
<span class="line"><span>    smembers like:{消息ID}</span></span>
<span class="line"><span>  # 获取点赞的用户树</span></span>
<span class="line"><span>    scard like:{消息ID}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、实际的应用场景之zset-有序集合" tabindex="-1"><a class="header-anchor" href="#六、实际的应用场景之zset-有序集合"><span>六、实际的应用场景之Zset（有序集合）</span></a></h2><p>1、定义</p><p>zset和set一样也是string类型元素的集合，且不允许重复的成员。不同的是每个元素都会关联一个dobule类型的分数，redis正是通过分数为集合成员进行从小到大的排序，zset的成员是唯一的但是分数可以重复。</p>`,47),p=[l];function d(t,r){return n(),e("div",null,p)}const o=s(i,[["render",d],["__file","application.html.vue"]]),v=JSON.parse('{"path":"/database/redis/application.html","title":"【第六篇章】实际应用","lang":"zh-CN","frontmatter":{"title":"【第六篇章】实际应用","index":false,"isOriginal":true,"category":"数据库","tag":"redis","date":"2024-08-02T00:00:00.000Z","description":"一、概述 Redis 基础的数据类型有五种，分别是：String（字符串）、Hash（哈希）、List（列表）、Set（集合）、Zset（有序集合）。 二、实际的应用场景之String（字符串） 1、定义 string 是 redis 最基本的类型，一个 key 对应一个 value。string 类型是二进制安全的。因为 string 底层的实现是简...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/database/redis/application.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"【第六篇章】实际应用"}],["meta",{"property":"og:description","content":"一、概述 Redis 基础的数据类型有五种，分别是：String（字符串）、Hash（哈希）、List（列表）、Set（集合）、Zset（有序集合）。 二、实际的应用场景之String（字符串） 1、定义 string 是 redis 最基本的类型，一个 key 对应一个 value。string 类型是二进制安全的。因为 string 底层的实现是简..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-02T14:45:28.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:published_time","content":"2024-08-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-02T14:45:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【第六篇章】实际应用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-02T14:45:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、概述","slug":"一、概述","link":"#一、概述","children":[]},{"level":2,"title":"二、实际的应用场景之String（字符串）","slug":"二、实际的应用场景之string-字符串","link":"#二、实际的应用场景之string-字符串","children":[]},{"level":2,"title":"三、实际的应用场景之Hash（哈希）","slug":"三、实际的应用场景之hash-哈希","link":"#三、实际的应用场景之hash-哈希","children":[]},{"level":2,"title":"四、实际的应用场景之List（列表）","slug":"四、实际的应用场景之list-列表","link":"#四、实际的应用场景之list-列表","children":[]},{"level":2,"title":"五、实际的应用场景之Set（集合）","slug":"五、实际的应用场景之set-集合","link":"#五、实际的应用场景之set-集合","children":[]},{"level":2,"title":"六、实际的应用场景之Zset（有序集合）","slug":"六、实际的应用场景之zset-有序集合","link":"#六、实际的应用场景之zset-有序集合","children":[]}],"git":{"createdTime":1722609928000,"updatedTime":1722609928000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":1}]},"readingTime":{"minutes":3.46,"words":1037},"filePathRelative":"database/redis/application.md","localizedDate":"2024年8月2日","excerpt":"<h2>一、概述</h2>\\n<p>Redis 基础的数据类型有五种，分别是：String（字符串）、Hash（哈希）、List（列表）、Set（集合）、Zset（有序集合）。</p>\\n<h2>二、实际的应用场景之String（字符串）</h2>\\n<p>1、定义</p>\\n<p>string 是 redis 最基本的类型，一个 key 对应一个 value。string 类型是二进制安全的。因为 string 底层的实现是简单动态字符串 sds，是可以修改字符串。</p>\\n<p>2、应用场景</p>\\n<p>单值缓存、对象缓存、分布式锁、常规计数（粉丝数量、评论数量）、分布式session共享、分布式全局序列号。</p>","autoDesc":true}');export{o as comp,v as data};
