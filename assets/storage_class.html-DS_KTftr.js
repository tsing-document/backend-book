import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o,a as c}from"./app-BstiAWcc.js";const a={},i=c("<p><code>存储类</code> 定义 c++ 程序中变量/函数的范围（可见性）和生命周期，这些说明符放在它们所修饰的类型之前。</p><ul><li><code>auto:</code> 这是默认的存储类说明符，通常可以省略不写。auto 指定的变量具有自动存续期，即它们的生命周期仅限于定义它们的块。</li><li><code>static:</code> 用于定义具有静态存储期的变量和函数，它们的生命周期贯穿整个程序的运行期。在函数内部，static变量的值在函数调用之间保持不变，在文件内部或全局作用域，static变量具有内部连接，只能在定义它们的文件中访问。</li><li><code>extern:</code> 用于声明具有外部连接的变量或函数，它们可以在多个文件之间共享。默认情况下，全局变量和函数具有 extern 存储类。在一个文件中实用 extern 声明，另一个文件中定义的全局变量或函数，可以实现跨文件共享。</li><li><code>mutable(c++11):</code> 用于修饰类中成员变量，允许在const成员函数中修改这些变量的值。通常用于缓存或计数器等需要在 const 上下文中修改的数据。</li><li><code>thread_local(c++11):</code> 用于定义具有线程局部存储期的变量，每个线程都有自己的独立副本。线程局部变量的声明周期与线程的声明周期相同。</li></ul>",2),r=[i];function l(n,s){return o(),e("div",null,r)}const m=t(a,[["render",l],["__file","storage_class.html.vue"]]),u=JSON.parse('{"path":"/c/base/storage_class.html","title":"【第三篇章】 存储类","lang":"zh-CN","frontmatter":{"title":"【第三篇章】 存储类","index":false,"isOriginal":true,"category":"c++","tag":"c++","date":"2025-02-10T00:00:00.000Z","description":"存储类 定义 c++ 程序中变量/函数的范围（可见性）和生命周期，这些说明符放在它们所修饰的类型之前。 auto: 这是默认的存储类说明符，通常可以省略不写。auto 指定的变量具有自动存续期，即它们的生命周期仅限于定义它们的块。 static: 用于定义具有静态存储期的变量和函数，它们的生命周期贯穿整个程序的运行期。在函数内部，static变量的值在...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/c/base/storage_class.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"【第三篇章】 存储类"}],["meta",{"property":"og:description","content":"存储类 定义 c++ 程序中变量/函数的范围（可见性）和生命周期，这些说明符放在它们所修饰的类型之前。 auto: 这是默认的存储类说明符，通常可以省略不写。auto 指定的变量具有自动存续期，即它们的生命周期仅限于定义它们的块。 static: 用于定义具有静态存储期的变量和函数，它们的生命周期贯穿整个程序的运行期。在函数内部，static变量的值在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-10T03:34:15.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"c++"}],["meta",{"property":"article:published_time","content":"2025-02-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-10T03:34:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【第三篇章】 存储类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-10T03:34:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1739158455000,"updatedTime":1739158455000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":1}]},"readingTime":{"minutes":1.31,"words":392},"filePathRelative":"c/base/storage_class.md","localizedDate":"2025年2月10日","excerpt":"<p><code>存储类</code> 定义 c++ 程序中变量/函数的范围（可见性）和生命周期，这些说明符放在它们所修饰的类型之前。</p>\\n<ul>\\n<li><code>auto:</code> 这是默认的存储类说明符，通常可以省略不写。auto 指定的变量具有自动存续期，即它们的生命周期仅限于定义它们的块。</li>\\n<li><code>static:</code> 用于定义具有静态存储期的变量和函数，它们的生命周期贯穿整个程序的运行期。在函数内部，static变量的值在函数调用之间保持不变，在文件内部或全局作用域，static变量具有内部连接，只能在定义它们的文件中访问。</li>\\n<li><code>extern:</code> 用于声明具有外部连接的变量或函数，它们可以在多个文件之间共享。默认情况下，全局变量和函数具有 extern 存储类。在一个文件中实用 extern 声明，另一个文件中定义的全局变量或函数，可以实现跨文件共享。</li>\\n<li><code>mutable(c++11):</code> 用于修饰类中成员变量，允许在const成员函数中修改这些变量的值。通常用于缓存或计数器等需要在 const 上下文中修改的数据。</li>\\n<li><code>thread_local(c++11):</code> 用于定义具有线程局部存储期的变量，每个线程都有自己的独立副本。线程局部变量的声明周期与线程的声明周期相同。</li>\\n</ul>","autoDesc":true}');export{m as comp,u as data};
