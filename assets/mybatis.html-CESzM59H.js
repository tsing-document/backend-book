import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as e}from"./app-B0bPUF07.js";const l={};function n(h,i){return e(),a("div",null,i[0]||(i[0]=[t(`<h2 id="一、mybatis-的历史" tabindex="-1"><a class="header-anchor" href="#一、mybatis-的历史"><span>一、MyBatis 的历史</span></a></h2><p>MyBatis 的前身是 iBATIS，它最早在 2001年由 Clinton Begin 发起。iBATIS 在早期就因其简单易用和灵活的特性受到了开发者的关注。</p><p>随着时间的推移，iBATIS 不断发展和改进。然而，在 2010年，iBATIS 项目团队决定将其更名为 MyBatis，主要原因是希望有一个更清晰和独特的品牌标识，并且能够更好地体现项目的发展方向和新的特性。</p><p>从那以后，MyBatis 持续演进，不断增加新的功能和改进性能，逐渐成为 Java 领域中非常受欢迎的持久层框架之一。</p><h2 id="二、mybatis-的核心概念和特点" tabindex="-1"><a class="header-anchor" href="#二、mybatis-的核心概念和特点"><span>二、MyBatis 的核心概念和特点</span></a></h2><p>1、SQL 映射文件</p><ul><li>MyBatis 通过 SQL 映射文件将 SQL 语句与 Java 代码解耦。在这些映射文件中，开发者可以直接编写原生的 SQL 语句，然后将其与 Java 方法进行映射。例如，可以定义一个查询用户信息的 SQL 语句如下：<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;selectUserById&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> parameterType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;int&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> resultType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;com.example.User&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   SELECT * FROM users WHERE id = #{id}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>这里的<code>selectUserById</code>是一个可以在 Java 代码中调用的方法名，<code>#{id}</code>是一个占位符，用于接收传入的参数。这种方式使得 SQL 语句的编写和维护更加清晰，避免了在 Java 代码中嵌入大量复杂的 SQL 字符串。</li></ul><p>2、对象关系映射（ORM）</p><ul><li>MyBatis 提供了一定程度的对象关系映射功能。它可以将数据库表中的记录映射为 Java 对象，反之亦然。例如，当执行上述的<code>selectUserById</code>查询时，MyBatis 会将查询结果集的每一行数据转换为一个<code>User</code>对象（假设<code>User</code>是一个自定义的 Java 类，与数据库中的<code>users</code>表相对应）。这样，在 Java 代码中就可以方便地操作这些对象，而不需要直接处理原始的数据库记录。</li><li>同时，MyBatis 也支持将 Java 对象的属性值自动设置为 SQL 语句的参数。例如，当调用一个插入用户信息的方法时，MyBatis 可以自动将<code>User</code>对象的属性值作为参数传递给相应的 SQL 插入语句。</li></ul><p>3、动态 SQL</p><ul><li>MyBatis 支持动态 SQL 的编写，这意味着可以根据不同的条件构建不同的 SQL 语句。例如，可以根据传入的参数决定是否在 WHERE 子句中添加某些条件。以下是一个使用动态 SQL 的示例：<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;selectUsersByConditions&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> resultType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;com.example.User&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   SELECT * FROM users</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">if</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;username!= null&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            AND username = #{username}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">if</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;email!= null&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            AND email = #{email}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>在这个例子中，根据<code>username</code>和<code>email</code>参数是否为空，动态地构建 WHERE 子句，从而实现更加灵活的查询功能。</li></ul><p>4、缓存机制</p><ul><li>MyBatis 提供了一级缓存和二级缓存机制。一级缓存是默认开启的，它位于 SqlSession 级别，即同一个 SqlSession 对相同的查询会从缓存中获取结果，而不会再次执行 SQL 语句，除非数据被修改。二级缓存是基于命名空间（Mapper 接口）的，可以在多个 SqlSession 之间共享缓存数据，提高数据访问的效率。例如，在一个频繁查询用户信息的应用中，如果用户信息相对不经常变动，可以利用二级缓存来减少对数据库的访问次数，提高性能。</li></ul><h2 id="三、mybatis-的优势" tabindex="-1"><a class="header-anchor" href="#三、mybatis-的优势"><span>三、MyBatis 的优势</span></a></h2><p>1、灵活性和可维护性</p><ul><li>与一些全功能的 ORM 框架相比，MyBatis 给予开发者更多对 SQL 语句的控制。在某些复杂的数据库操作场景下，开发者可以编写高度优化的 SQL 语句，以满足特定的性能要求。例如，在处理大数据量的报表查询时，开发者可以根据数据库的特点和索引情况，精确地编写 SQL 语句来提高查询效率。同时，由于 SQL 语句与 Java 代码分离，当数据库结构或业务需求发生变化时，只需要修改相应的 SQL 映射文件，而不需要在 Java 代码中进行大量的修改，提高了代码的可维护性。</li></ul><p>2、与 Spring 等框架的集成</p><ul><li>MyBatis 可以很容易地与 Spring 框架集成，成为 Spring 应用程序中的数据访问层解决方案。通过 Spring 的依赖注入和配置管理功能，可以方便地将 MyBatis 的 SqlSessionFactory 和 Mapper 接口等组件配置到应用程序中。例如，在一个基于 Spring Boot 的应用中，只需要添加相关的 MyBatis 依赖和简单的配置，就可以快速使用 MyBatis 进行数据库操作。这种集成使得应用程序的整体架构更加清晰，同时也利用了 Spring 的其他优势，如事务管理等。</li><li>它也适用于多种数据库环境，无论是关系型数据库如 MySQL、Oracle，还是其他数据库产品，MyBatis 都可以通过适当的数据库驱动和配置来进行操作。这使得在不同的项目环境中切换数据库相对容易，只需要修改少量的配置即可。</li></ul>`,18)]))}const d=s(l,[["render",n],["__file","mybatis.html.vue"]]),k=JSON.parse('{"path":"/java/advanced/mybatis.html","title":"【第十三篇章】MyBatis 框架介绍","lang":"zh-CN","frontmatter":{"title":"【第十三篇章】MyBatis 框架介绍","index":false,"isOriginal":true,"category":"JAVA","tag":"Java进阶","date":"2024-08-07T00:00:00.000Z","description":"一、MyBatis 的历史 MyBatis 的前身是 iBATIS，它最早在 2001年由 Clinton Begin 发起。iBATIS 在早期就因其简单易用和灵活的特性受到了开发者的关注。 随着时间的推移，iBATIS 不断发展和改进。然而，在 2010年，iBATIS 项目团队决定将其更名为 MyBatis，主要原因是希望有一个更清晰和独特的品牌...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/java/advanced/mybatis.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"【第十三篇章】MyBatis 框架介绍"}],["meta",{"property":"og:description","content":"一、MyBatis 的历史 MyBatis 的前身是 iBATIS，它最早在 2001年由 Clinton Begin 发起。iBATIS 在早期就因其简单易用和灵活的特性受到了开发者的关注。 随着时间的推移，iBATIS 不断发展和改进。然而，在 2010年，iBATIS 项目团队决定将其更名为 MyBatis，主要原因是希望有一个更清晰和独特的品牌..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-07T11:32:09.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"Java进阶"}],["meta",{"property":"article:published_time","content":"2024-08-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-07T11:32:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【第十三篇章】MyBatis 框架介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-07T11:32:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、MyBatis 的历史","slug":"一、mybatis-的历史","link":"#一、mybatis-的历史","children":[]},{"level":2,"title":"二、MyBatis 的核心概念和特点","slug":"二、mybatis-的核心概念和特点","link":"#二、mybatis-的核心概念和特点","children":[]},{"level":2,"title":"三、MyBatis 的优势","slug":"三、mybatis-的优势","link":"#三、mybatis-的优势","children":[]}],"git":{"createdTime":1723030329000,"updatedTime":1723030329000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":1}]},"readingTime":{"minutes":4.42,"words":1327},"filePathRelative":"java/advanced/mybatis.md","localizedDate":"2024年8月7日","excerpt":"<h2>一、MyBatis 的历史</h2>\\n<p>MyBatis 的前身是 iBATIS，它最早在 2001年由 Clinton Begin 发起。iBATIS 在早期就因其简单易用和灵活的特性受到了开发者的关注。</p>\\n<p>随着时间的推移，iBATIS 不断发展和改进。然而，在 2010年，iBATIS 项目团队决定将其更名为 MyBatis，主要原因是希望有一个更清晰和独特的品牌标识，并且能够更好地体现项目的发展方向和新的特性。</p>\\n<p>从那以后，MyBatis 持续演进，不断增加新的功能和改进性能，逐渐成为 Java 领域中非常受欢迎的持久层框架之一。</p>\\n<h2>二、MyBatis 的核心概念和特点</h2>","autoDesc":true}');export{d as comp,k as data};
