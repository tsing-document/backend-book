import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as e,a as i}from"./app-BQ2AKPKo.js";const n={},o=i('<h2 id="一、spring-boot-有哪些优点" tabindex="-1"><a class="header-anchor" href="#一、spring-boot-有哪些优点"><span>一、Spring Boot 有哪些优点？</span></a></h2><ul><li>没有单独的 Web 服务器需要，这意味着不需要启动 Tomcat、Jboss 等其他的服务器</li><li>减少之前的各种配置基本上算是 0 配置启动项目</li><li>避免大量的 Maven 导入和各种版本冲突</li></ul><h2 id="二、什么是-javaconfig" tabindex="-1"><a class="header-anchor" href="#二、什么是-javaconfig"><span>二、什么是 JavaConfig?</span></a></h2><p>Spring JavaConfig 是 Spring 社区的产品，它提供了配置 Spring Ioc 容器的纯 Java 方法。因此它有助于避免使用 XML 配置，使用 JavaConfig 的优点在于：</p><ul><li><p>面向对象的配置：由于配置被定义为 JavaConfig 中的类，因此用户可以充分利用 Java 中面向对象功能。一个配置类可以继承另一个，从写它的 @Bean 方法等。</p></li><li><p>减少或消除 XML 配置：基于依赖注入原则的外化配置的好处已经被证明，但是，许多开发人员不希望在 XML 和 Java 之间来回切换。JavaConfig 为开发人员提供了一种纯 java 方法来配置与 XML 配置概念相似的 Spring 容器。从技术的角度来讲，只使用 JavaConfig 配置类来配置容器是可行的，但实际上很多人认为将 JavaConfig 和 XML 混合匹配时理想的。</p></li><li><p>类型安全和重构友好：JavaConfig 提供了一种类型安全的方法来配置 Spring 容器。由于 Java 5.0 对泛型的支持，现在可以按类型而不是按名称检索 bean，不需要任何强制转换或基于字符串查找。</p></li></ul>',5),r=[o];function p(l,g){return e(),t("div",null,r)}const m=a(n,[["render",p],["__file","springboot_upper.html.vue"]]),v=JSON.parse('{"path":"/interview/springboot/springboot_upper.html","title":"🍉面试总结(上)","lang":"zh-CN","frontmatter":{"title":"🍉面试总结(上)","index":false,"isOriginal":true,"category":"面试宝典","tag":"springboot","date":"2024-08-11T00:00:00.000Z","description":"一、Spring Boot 有哪些优点？ 没有单独的 Web 服务器需要，这意味着不需要启动 Tomcat、Jboss 等其他的服务器 减少之前的各种配置基本上算是 0 配置启动项目 避免大量的 Maven 导入和各种版本冲突 二、什么是 JavaConfig? Spring JavaConfig 是 Spring 社区的产品，它提供了配置 Sprin...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/interview/springboot/springboot_upper.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"🍉面试总结(上)"}],["meta",{"property":"og:description","content":"一、Spring Boot 有哪些优点？ 没有单独的 Web 服务器需要，这意味着不需要启动 Tomcat、Jboss 等其他的服务器 减少之前的各种配置基本上算是 0 配置启动项目 避免大量的 Maven 导入和各种版本冲突 二、什么是 JavaConfig? Spring JavaConfig 是 Spring 社区的产品，它提供了配置 Sprin..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-13T13:13:27.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"springboot"}],["meta",{"property":"article:published_time","content":"2024-08-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-13T13:13:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"🍉面试总结(上)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-13T13:13:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、Spring Boot 有哪些优点？","slug":"一、spring-boot-有哪些优点","link":"#一、spring-boot-有哪些优点","children":[]},{"level":2,"title":"二、什么是 JavaConfig?","slug":"二、什么是-javaconfig","link":"#二、什么是-javaconfig","children":[]}],"git":{"createdTime":1723478322000,"updatedTime":1723554807000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":1}]},"readingTime":{"minutes":1.32,"words":397},"filePathRelative":"interview/springboot/springboot_upper.md","localizedDate":"2024年8月11日","excerpt":"<h2>一、Spring Boot 有哪些优点？</h2>\\n<ul>\\n<li>没有单独的 Web 服务器需要，这意味着不需要启动 Tomcat、Jboss 等其他的服务器</li>\\n<li>减少之前的各种配置基本上算是 0 配置启动项目</li>\\n<li>避免大量的 Maven 导入和各种版本冲突</li>\\n</ul>\\n<h2>二、什么是 JavaConfig?</h2>\\n<p>Spring JavaConfig 是 Spring 社区的产品，它提供了配置 Spring Ioc 容器的纯 Java 方法。因此它有助于避免使用 XML 配置，使用 JavaConfig 的优点在于：</p>\\n<ul>\\n<li>\\n<p>面向对象的配置：由于配置被定义为 JavaConfig 中的类，因此用户可以充分利用 Java 中面向对象功能。一个配置类可以继承另一个，从写它的 @Bean 方法等。</p>\\n</li>\\n<li>\\n<p>减少或消除 XML 配置：基于依赖注入原则的外化配置的好处已经被证明，但是，许多开发人员不希望在 XML 和 Java 之间来回切换。JavaConfig 为开发人员提供了一种纯 java 方法来配置与 XML 配置概念相似的 Spring 容器。从技术的角度来讲，只使用 JavaConfig 配置类来配置容器是可行的，但实际上很多人认为将 JavaConfig 和 XML 混合匹配时理想的。</p>\\n</li>\\n<li>\\n<p>类型安全和重构友好：JavaConfig 提供了一种类型安全的方法来配置 Spring 容器。由于 Java 5.0 对泛型的支持，现在可以按类型而不是按名称检索 bean，不需要任何强制转换或基于字符串查找。</p>\\n</li>\\n</ul>","autoDesc":true}');export{m as comp,v as data};
