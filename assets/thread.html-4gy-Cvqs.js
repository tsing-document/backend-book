import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as l,o as n}from"./app-CGZRCIfw.js";const e="/backend-book/assets/thread-state-BJ7g3mPr.png",h={};function t(k,i){return n(),a("div",null,i[0]||(i[0]=[l(`<p>多线程是一种编程概念，它允许多个执行路径（线程）在同一进程内并发运行。</p><h2 id="一、多线程的概念和作用" tabindex="-1"><a class="header-anchor" href="#一、多线程的概念和作用"><span>一、多线程的概念和作用</span></a></h2><p>1、概念</p><ul><li>线程是程序执行的最小单元，一个进程可以包含多个线程。每个线程都有自己的程序计数器、栈和局部变量，但它们共享进程的内存空间和其他资源（如打开的文件、网络连接等）。</li><li>多线程就是在一个程序中同时运行多个线程，每个线程可以执行不同的任务或相同任务的不同部分。</li></ul><p>2、作用</p><ul><li><p>提高程序性能：通过将一个大任务分解成多个小任务并在不同线程中并行执行，可以充分利用多核处理器的优势，减少程序的执行时间。例如，在图像编辑软件中，可以使用一个线程来处理用户界面的交互，另一个线程用于后台的图像渲染，从而提高整体的响应速度。</p></li><li><p>增强程序的响应能力：在一些需要与用户进行实时交互的应用中，多线程可以确保即使在执行耗时操作时，程序仍然能够及时响应用户的输入。比如在网页浏览器中，一个线程可以用于加载网页内容，而另一个线程可以处理用户的鼠标点击和滚动操作，这样用户不会感觉到界面卡顿。</p></li><li><p>实现异步操作：多线程使得程序可以在后台执行某些操作，而不阻塞主线程的执行。例如，在文件下载程序中，启动一个新线程来下载文件，主线程可以继续显示下载进度或执行其他任务，当下载完成后，再进行相应的处理。</p></li></ul><p>3、线程和进程</p><ul><li>线程：一个进程中可以有多个线程，如看视频的同时可以听声音，看图像，看弹幕等等。</li><li>进程: 操作系统中运行的程序就是进程，比如QQ、播放器、游戏、IDE等等。</li></ul><h2 id="二、实现多线程的方式" tabindex="-1"><a class="header-anchor" href="#二、实现多线程的方式"><span>二、实现多线程的方式</span></a></h2><h3 id="_1、继承-thread-类" tabindex="-1"><a class="header-anchor" href="#_1、继承-thread-类"><span>1、继承 Thread 类</span></a></h3><p>定义一个类继承自Thread类，然后重写run方法，在run方法中编写线程要执行的任务代码。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyThread</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;This is a new thread.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动线程</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        MyThread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> myThread</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        myThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当调用start方法时，Java 虚拟机会自动调用该线程的run方法来执行线程的任务。</p><h3 id="_2、实现runnable接口" tabindex="-1"><a class="header-anchor" href="#_2、实现runnable接口"><span>2、实现Runnable接口</span></a></h3><p>定义一个类实现Runnable接口，并实现run方法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyRunnable</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;This is a thread implemented by Runnable.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动线程</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        MyRunnable</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> myRunnable</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyRunnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> thread</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(myRunnable);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式更加灵活，因为 Java 不支持多继承，如果一个类已经继承了其他类，就不能再继承Thread类了，此时可以采用实现Runnable接口的方式来创建线程。</p><h3 id="_3、实现-callable-接口" tabindex="-1"><a class="header-anchor" href="#_3、实现-callable-接口"><span>3、实现 Callable 接口</span></a></h3><p>在 Java 中，Callable接口是一种用于创建可以返回结果并且可能抛出异常的任务的方式。它与Runnable接口类似，但Callable可以返回结果，而Runnable的run方法没有返回值。</p><p>定义一个实现Callable接口的类</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.concurrent.Callable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyCallable</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Callable</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 这里编写具体的任务代码，此示例中模拟一个耗时操作后返回结果</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Callable 任务执行完成并返回结果&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在主线程中使用Callable</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.concurrent.ExecutionException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.concurrent.ExecutorService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.concurrent.Executors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.concurrent.Future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 创建一个线程池</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ExecutorService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> executorService</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Executors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newSingleThreadExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 提交 Callable 任务到线程池并获取 Future 对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Future</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">future</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> executorService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">submit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyCallable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 从 Future 对象获取 Callable 任务的结果，如果任务未完成，此方法会阻塞直到任务完成</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ExecutionException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 关闭线程池</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        executorService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shutdown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中：</p><ul><li>首先定义了MyCallable类实现Callable接口，并重写call方法来执行具体的任务，这里模拟了一个耗时操作（通过Thread.sleep）后返回一个字符串结果。</li><li>在main方法中，创建了一个单线程的线程池ExecutorService，通过submit方法将MyCallable任务提交到线程池中执行，submit方法会返回一个Future对象，这个对象可以用来获取任务的执行结果。然后通过future.get方法获取任务的结果，如果任务还未完成，get方法会阻塞当前线程直到任务完成。最后关闭线程池。</li></ul><p>使用Callable接口可以方便地在多线程环境中执行有返回值的任务，并且可以通过Future对象来管理任务的执行状态和结果。这在需要执行一些耗时的计算并获取结果的场景中非常有用，比如在网络请求、数据库查询等操作中。</p><h2 id="三、线程的五种状态" tabindex="-1"><a class="header-anchor" href="#三、线程的五种状态"><span>三、线程的五种状态</span></a></h2><p>线程存在五种状态分别是：创建状态、就绪状态、阻塞状态、死亡状态、运行状态。</p><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="四、多线程的优点和挑战" tabindex="-1"><a class="header-anchor" href="#四、多线程的优点和挑战"><span>四、多线程的优点和挑战</span></a></h2><p>1、优点</p><ul><li>资源共享：由于线程共享进程的内存空间，它们可以方便地共享数据和资源。这使得在多个线程之间传递信息和协作变得相对容易。例如，多个线程可以同时访问和修改同一个数组，而不需要进行复杂的数据传递和复制操作。</li><li>提高效率：如前面提到的，多线程能够充分利用多核处理器的优势，将任务并行执行，从而提高程序的整体效率。特别是对于计算密集型和 I/O 密集型任务，多线程可以显著减少执行时间。</li><li>简化程序结构：对于一些复杂的应用程序，将任务分解为多个线程可以使程序的结构更加清晰和易于维护。每个线程可以专注于执行一个特定的子任务，使得代码的逻辑更加模块化。</li></ul><p>2、挑战</p><ul><li>线程安全问题：当多个线程同时访问和修改共享数据时，可能会导致数据不一致或程序错误。例如，两个线程同时对一个计数器进行递增操作，如果不采取适当的同步措施，可能会导致计数器的值不准确。常见的解决方法包括使用synchronized关键字、Lock接口等进行线程同步。</li><li>死锁：在多线程编程中，如果多个线程相互等待对方持有的资源，就会导致死锁。例如，线程 A 持有资源 X 并等待资源 Y，而线程 B 持有资源 Y 并等待资源 X，这时两个线程都无法继续执行，程序就会陷入死锁状态。避免死锁需要合理的资源分配策略和线程同步设计。</li><li>线程调度复杂性：操作系统负责线程的调度，决定哪个线程何时可以执行。然而，线程的调度是不可预测的，这可能导致程序的执行顺序不确定。例如，在一个多线程的游戏程序中，如果线程调度导致游戏逻辑的执行顺序不一致，可能会出现画面闪烁或游戏状态异常等问题。这就需要程序员在编写多线程程序时，充分考虑到各种可能的执行顺序，并进行适当的处理。</li></ul><h2 id="todo-未解决的问题" tabindex="-1"><a class="header-anchor" href="#todo-未解决的问题"><span>TODO: 未解决的问题</span></a></h2><ul><li>线程的方法： <ul><li>停止线程</li><li>休眠线程</li><li>礼让线程</li><li>合并线程</li></ul></li><li>线程优先级：</li><li>守护进程：</li><li>线程同步：</li><li>同步方法： <ul><li>synchronized</li></ul></li><li>死锁：</li><li>Lock锁：</li><li>生产者和消费者： <ul><li>解决方式： <ul><li>利用缓冲去解决：管道法</li><li>信号灯法：标志位</li></ul></li></ul></li><li>线程池：</li></ul>',40)]))}const d=s(h,[["render",t],["__file","thread.html.vue"]]),A=JSON.parse('{"path":"/java/base/thread.html","title":"【第九篇章】多线程","lang":"zh-CN","frontmatter":{"title":"【第九篇章】多线程","index":false,"isOriginal":true,"category":"JAVA","tag":"Java基础","date":"2024-08-06T00:00:00.000Z","description":"多线程是一种编程概念，它允许多个执行路径（线程）在同一进程内并发运行。 一、多线程的概念和作用 1、概念 线程是程序执行的最小单元，一个进程可以包含多个线程。每个线程都有自己的程序计数器、栈和局部变量，但它们共享进程的内存空间和其他资源（如打开的文件、网络连接等）。 多线程就是在一个程序中同时运行多个线程，每个线程可以执行不同的任务或相同任务的不同部分...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/java/base/thread.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"【第九篇章】多线程"}],["meta",{"property":"og:description","content":"多线程是一种编程概念，它允许多个执行路径（线程）在同一进程内并发运行。 一、多线程的概念和作用 1、概念 线程是程序执行的最小单元，一个进程可以包含多个线程。每个线程都有自己的程序计数器、栈和局部变量，但它们共享进程的内存空间和其他资源（如打开的文件、网络连接等）。 多线程就是在一个程序中同时运行多个线程，每个线程可以执行不同的任务或相同任务的不同部分..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-07T11:32:09.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:published_time","content":"2024-08-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-07T11:32:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【第九篇章】多线程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-07T11:32:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、多线程的概念和作用","slug":"一、多线程的概念和作用","link":"#一、多线程的概念和作用","children":[]},{"level":2,"title":"二、实现多线程的方式","slug":"二、实现多线程的方式","link":"#二、实现多线程的方式","children":[{"level":3,"title":"1、继承 Thread 类","slug":"_1、继承-thread-类","link":"#_1、继承-thread-类","children":[]},{"level":3,"title":"2、实现Runnable接口","slug":"_2、实现runnable接口","link":"#_2、实现runnable接口","children":[]},{"level":3,"title":"3、实现 Callable 接口","slug":"_3、实现-callable-接口","link":"#_3、实现-callable-接口","children":[]}]},{"level":2,"title":"三、线程的五种状态","slug":"三、线程的五种状态","link":"#三、线程的五种状态","children":[]},{"level":2,"title":"四、多线程的优点和挑战","slug":"四、多线程的优点和挑战","link":"#四、多线程的优点和挑战","children":[]},{"level":2,"title":"TODO: 未解决的问题","slug":"todo-未解决的问题","link":"#todo-未解决的问题","children":[]}],"git":{"createdTime":1722956513000,"updatedTime":1723030329000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":2}]},"readingTime":{"minutes":6.82,"words":2046},"filePathRelative":"java/base/thread.md","localizedDate":"2024年8月6日","excerpt":"<p>多线程是一种编程概念，它允许多个执行路径（线程）在同一进程内并发运行。</p>\\n<h2>一、多线程的概念和作用</h2>\\n<p>1、概念</p>\\n<ul>\\n<li>线程是程序执行的最小单元，一个进程可以包含多个线程。每个线程都有自己的程序计数器、栈和局部变量，但它们共享进程的内存空间和其他资源（如打开的文件、网络连接等）。</li>\\n<li>多线程就是在一个程序中同时运行多个线程，每个线程可以执行不同的任务或相同任务的不同部分。</li>\\n</ul>\\n<p>2、作用</p>\\n<ul>\\n<li>\\n<p>提高程序性能：通过将一个大任务分解成多个小任务并在不同线程中并行执行，可以充分利用多核处理器的优势，减少程序的执行时间。例如，在图像编辑软件中，可以使用一个线程来处理用户界面的交互，另一个线程用于后台的图像渲染，从而提高整体的响应速度。</p>\\n</li>\\n<li>\\n<p>增强程序的响应能力：在一些需要与用户进行实时交互的应用中，多线程可以确保即使在执行耗时操作时，程序仍然能够及时响应用户的输入。比如在网页浏览器中，一个线程可以用于加载网页内容，而另一个线程可以处理用户的鼠标点击和滚动操作，这样用户不会感觉到界面卡顿。</p>\\n</li>\\n<li>\\n<p>实现异步操作：多线程使得程序可以在后台执行某些操作，而不阻塞主线程的执行。例如，在文件下载程序中，启动一个新线程来下载文件，主线程可以继续显示下载进度或执行其他任务，当下载完成后，再进行相应的处理。</p>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,A as data};
