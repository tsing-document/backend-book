import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as r,a as l}from"./app-Dlq9e5Ba.js";const s={},t=l('<h2 id="一、为什么使用-redis" tabindex="-1"><a class="header-anchor" href="#一、为什么使用-redis"><span>一、为什么使用 redis？</span></a></h2><p>使用缓存的目的就是提升读写性能。为了提高读写性能，带来更高的并发量。减少对 MySQL 的请求量。</p><h2 id="二、redis-有哪些好处" tabindex="-1"><a class="header-anchor" href="#二、redis-有哪些好处"><span>二、redis 有哪些好处？</span></a></h2><ul><li>读写速度快，因为数据存储在内存中，所以数据获取快。</li><li>支持多种数据结构。包括字符串、列表、集合、有序列表、哈希等。</li><li>支持事务，且操作遵守原子性，即对数据的操作要麽都执行、要麽都不执行。</li><li>还支持队列、主从复制、集群、数据持久化等功能。</li></ul><h2 id="三、redis-和-memcache-区别" tabindex="-1"><a class="header-anchor" href="#三、redis-和-memcache-区别"><span>三、redis 和 memcache 区别</span></a></h2><ul><li>redis 和 memcache 都是将数据存储到内存中，都是内存数据库。</li><li>memcache 仅支持 key-value 结构的数据类型。redis 支持多种数据类型：string、hash、set、zset、list 等等。</li><li>redis 当物理内存用完时，可以将一些很久没用的 value 交换到磁盘。</li><li>memcache 可以利用 magent 做出一主多从；redis 也可以做一主多从。</li><li>memcache 挂掉之后数据就没有了；redis 可以定期保存数据到磁盘。</li><li>memcache 单个 value 最大 1M; redis 的单个最大时 512M.</li><li>memcache 挂掉之后数据不能恢复；redis 数据丢失后可以通过 aof 或者 rdb 恢复。</li><li>memcache 网络 IO 模型是多线程，非阻塞 IO 复用的网络模型，原型上接进 nginx。redis 使用单线程的 IO 复用模型。</li></ul><h2 id="四、为什么单线程效率还那么高" tabindex="-1"><a class="header-anchor" href="#四、为什么单线程效率还那么高"><span>四、为什么单线程效率还那么高？</span></a></h2><ul><li>c 语言编写，效率高</li><li>存内存操作</li><li>基于非阻塞IO复用模型机制</li><li>单线程避免了多线程上下文切换问题</li><li>丰富的数据结构</li></ul><h2 id="五、redis-的同步机制了解是什么" tabindex="-1"><a class="header-anchor" href="#五、redis-的同步机制了解是什么"><span>五、redis 的同步机制了解是什么？</span></a></h2><p>redis 支持主从同步、从从同步。如果是第一次进行主从同步，主节点需要使用 bgsave 命令，再将后续修改操作记录到内存的缓冲区，等 RDB 文件全部同步到复制节点，复制节点接受完成后将 RDB 镜像加载到内存中。等加载完成后，复制节点通知主节点将复制期间修改的操作记录同步到复制节点，即可完成同步过程。</p><h2 id="六、对-redis-事务的理解" tabindex="-1"><a class="header-anchor" href="#六、对-redis-事务的理解"><span>六、对 redis 事务的理解</span></a></h2><p>1、什么是 redis 事务？原理是什么？</p><p>redis 中的事务是一组命令的集合，是 redis 的最小执行单位。它可以保证一次执行多个命令，每个事务是一个单独隔离的操作。事务中的所有命令都会序列化、按顺序执行。服务端再执行事务的过程中，不会被其他客户端发来的命令请求打断。</p><p>2、redis 事务的注意点？</p><ul><li>redis 事务不支持回滚，不像 MySQL 的事务一样，要么都执行要么都不执行。</li><li>redis 服务端在执行事务的过程中，不会被其他客户端发来的命令请求打断，直到事务命令全部执行完毕才会执行其他客户端的命令。</li></ul><h2 id="七、redis-如果存储了-bigkey-会存在什么影响" tabindex="-1"><a class="header-anchor" href="#七、redis-如果存储了-bigkey-会存在什么影响"><span>七、redis 如果存储了 bigkey 会存在什么影响？</span></a></h2><ul><li>网络阻塞：获取 bigkey，传输的数据量大，会增加带宽的压力。</li><li>超时阻塞：因为 bigkey 占用的空间大，所以操作起来效率低，导致出现阻塞的可能性增大。</li><li>导致内存空间不平衡：一个 bigkey 存储量比较大，同一个 key 在同一个节点或服务器中存储，会造成一定影响。</li></ul><h2 id="八、缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级等问题" tabindex="-1"><a class="header-anchor" href="#八、缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级等问题"><span>八、缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级等问题</span></a></h2><p>1、缓存雪崩</p><p>缓存雪崩是在同一时间大量的 key 过期，导致所有的请求直接访问数据库。对数据库的 CPU 和内存造成了巨大压力，严重的会造成数据库宕机。</p><p>解决方案：最简单的处理方案是将缓存失效时间分开。</p><p>2、缓存穿透</p><p>缓存穿透是指用户请求数据，在数据库中没有，自然缓存中也没有，就会导致会直接查询数据库，数据库中也没有就会返回null.</p><p>解决方案：采用布隆过滤器。</p><p>3、缓存预热</p><p>缓存预热是将一些需要缓存的数据通过接口或者页面实现存储缓存中。</p>',26),a=[t];function d(n,c){return r(),i("div",null,a)}const o=e(s,[["render",d],["__file","redis_upper.html.vue"]]),m=JSON.parse('{"path":"/interview/storage/redis_upper.html","title":"🍾redis常见面试题总结(上)","lang":"zh-CN","frontmatter":{"title":"🍾redis常见面试题总结(上)","index":false,"isOriginal":true,"category":"面试宝典","tag":"redis","date":"2024-08-19T00:00:00.000Z","description":"一、为什么使用 redis？ 使用缓存的目的就是提升读写性能。为了提高读写性能，带来更高的并发量。减少对 MySQL 的请求量。 二、redis 有哪些好处？ 读写速度快，因为数据存储在内存中，所以数据获取快。 支持多种数据结构。包括字符串、列表、集合、有序列表、哈希等。 支持事务，且操作遵守原子性，即对数据的操作要麽都执行、要麽都不执行。 还支持队列...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/interview/storage/redis_upper.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"🍾redis常见面试题总结(上)"}],["meta",{"property":"og:description","content":"一、为什么使用 redis？ 使用缓存的目的就是提升读写性能。为了提高读写性能，带来更高的并发量。减少对 MySQL 的请求量。 二、redis 有哪些好处？ 读写速度快，因为数据存储在内存中，所以数据获取快。 支持多种数据结构。包括字符串、列表、集合、有序列表、哈希等。 支持事务，且操作遵守原子性，即对数据的操作要麽都执行、要麽都不执行。 还支持队列..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T04:48:04.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:published_time","content":"2024-08-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-20T04:48:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"🍾redis常见面试题总结(上)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-20T04:48:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、为什么使用 redis？","slug":"一、为什么使用-redis","link":"#一、为什么使用-redis","children":[]},{"level":2,"title":"二、redis 有哪些好处？","slug":"二、redis-有哪些好处","link":"#二、redis-有哪些好处","children":[]},{"level":2,"title":"三、redis 和 memcache 区别","slug":"三、redis-和-memcache-区别","link":"#三、redis-和-memcache-区别","children":[]},{"level":2,"title":"四、为什么单线程效率还那么高？","slug":"四、为什么单线程效率还那么高","link":"#四、为什么单线程效率还那么高","children":[]},{"level":2,"title":"五、redis 的同步机制了解是什么？","slug":"五、redis-的同步机制了解是什么","link":"#五、redis-的同步机制了解是什么","children":[]},{"level":2,"title":"六、对 redis 事务的理解","slug":"六、对-redis-事务的理解","link":"#六、对-redis-事务的理解","children":[]},{"level":2,"title":"七、redis 如果存储了 bigkey 会存在什么影响？","slug":"七、redis-如果存储了-bigkey-会存在什么影响","link":"#七、redis-如果存储了-bigkey-会存在什么影响","children":[]},{"level":2,"title":"八、缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级等问题","slug":"八、缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级等问题","link":"#八、缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级等问题","children":[]}],"git":{"createdTime":1724129284000,"updatedTime":1724129284000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":1}]},"readingTime":{"minutes":3.68,"words":1104},"filePathRelative":"interview/storage/redis_upper.md","localizedDate":"2024年8月19日","excerpt":"<h2>一、为什么使用 redis？</h2>\\n<p>使用缓存的目的就是提升读写性能。为了提高读写性能，带来更高的并发量。减少对 MySQL 的请求量。</p>\\n<h2>二、redis 有哪些好处？</h2>\\n<ul>\\n<li>读写速度快，因为数据存储在内存中，所以数据获取快。</li>\\n<li>支持多种数据结构。包括字符串、列表、集合、有序列表、哈希等。</li>\\n<li>支持事务，且操作遵守原子性，即对数据的操作要麽都执行、要麽都不执行。</li>\\n<li>还支持队列、主从复制、集群、数据持久化等功能。</li>\\n</ul>\\n<h2>三、redis 和 memcache 区别</h2>\\n<ul>\\n<li>redis 和 memcache 都是将数据存储到内存中，都是内存数据库。</li>\\n<li>memcache 仅支持 key-value 结构的数据类型。redis 支持多种数据类型：string、hash、set、zset、list 等等。</li>\\n<li>redis 当物理内存用完时，可以将一些很久没用的 value 交换到磁盘。</li>\\n<li>memcache 可以利用 magent 做出一主多从；redis 也可以做一主多从。</li>\\n<li>memcache 挂掉之后数据就没有了；redis 可以定期保存数据到磁盘。</li>\\n<li>memcache 单个 value 最大 1M; redis 的单个最大时 512M.</li>\\n<li>memcache 挂掉之后数据不能恢复；redis 数据丢失后可以通过 aof 或者 rdb 恢复。</li>\\n<li>memcache 网络 IO 模型是多线程，非阻塞 IO 复用的网络模型，原型上接进 nginx。redis 使用单线程的 IO 复用模型。</li>\\n</ul>","autoDesc":true}');export{o as comp,m as data};
