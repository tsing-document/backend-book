import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as s,d as t}from"./app-D-godlPU.js";const a="/backend-book/assets/20201211162219-SHq8SZVF.png",n="/backend-book/assets/20201211163453-Cp-YUcF3.png",o="/backend-book/assets/20201211164948-DNJwIBku.png",d="/backend-book/assets/20201211171000-Cz3NWOGq.png",l={},r=t('<p>首先看一下这个 SQL 语句你会不会写? 下面是说明执行这个 SQL 语句，数据库底层做了什么操作。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> users </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;xxx&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在引擎要执行更新语句的时候，比如更新 <code>id=10</code> 这行数据时，他会先查看数据在缓冲池中是否存在，如果缓冲池中没有，会直接从磁盘中加载到缓冲池中，而且会对这行数据添加独占锁。</p><figure><img src="'+a+'" alt="innodb存储引擎" tabindex="0" loading="lazy"><figcaption>innodb存储引擎</figcaption></figure><p>接着上面的继续，假设 <code>id=10</code> 这行数据的 name 原来是 <code>zhangsan</code>，现在要更新为 <code>xxx</code>，那么此时我们的先把要更新的原来的值 <code>zhangsan</code> 和 <code>id=10</code>，写入到 undo 日志文件中。</p><figure><img src="'+n+'" alt="undo日志文件" tabindex="0" loading="lazy"><figcaption>undo日志文件</figcaption></figure><p>当数据从磁盘中加载数据到内存，然后将旧的数据写入到undo文件中之后，这个时候就会开始更新缓冲池中的数据，这个时候的数据是脏数据。因为这个时候还没有将更新后的数据持久化到磁盘上。</p><figure><img src="'+o+'" alt="更新缓冲池造成脏数据" tabindex="0" loading="lazy"><figcaption>更新缓冲池造成脏数据</figcaption></figure><p>上面已经把内存中的数据更新了，还没将数据持久化到磁盘上，但是这个时候如果数据库宕机，数据就会丢失，这个时候数据又出现了<code>redo log buffer</code>内存区域，将你修改的数据存放在这个里面。比如：<code>name=xxx</code> 这个就会存在里面。如果事务没有提交的话，数据库宕机了 <code>redo log buffer</code>也会丢失。其实这个时候是没有关系的，这个时候如果重启数据库，数据其实还是没有修改之前的数据。</p><figure><img src="'+d+'" alt="redolog" tabindex="0" loading="lazy"><figcaption>redolog</figcaption></figure><p>事务提交将 redo 日志写入到磁盘中，利用 <code>innodb_flush_log_at_trx_commit</code> 配置策略来将 redo 数据持久化到硬盘上</p><ul><li>参数是0： <ul><li>这个时候是不会将数据持久化到硬盘上的。</li></ul></li><li>参数是1： <ul><li>这个时候一定会将数据持久化到磁盘上，即使还没持久化到硬盘上的时候数据库宕机了，但是当数据库重启时，会根据<code>redo</code>将数据持久化到硬盘上。</li></ul></li><li>参数时2： <ul><li>这个时候会将数据存到 <code>os cache</code> 中，如果这个时候数据库宕机了。数据还是会丢失。</li></ul></li></ul>',12),p=[r];function h(c,k){return s(),e("div",null,p)}const u=i(l,[["render",h],["__file","innodb.html.vue"]]),b=JSON.parse(`{"path":"/database/mysql/advanced/innodb.html","title":"【第三篇章】Innodb 存储引擎是怎么工作的","lang":"zh-CN","frontmatter":{"title":"【第三篇章】Innodb 存储引擎是怎么工作的","index":false,"isOriginal":true,"category":"数据库","tag":"mysql","date":"2024-08-09T00:00:00.000Z","description":"首先看一下这个 SQL 语句你会不会写? 下面是说明执行这个 SQL 语句，数据库底层做了什么操作。 在引擎要执行更新语句的时候，比如更新 id=10 这行数据时，他会先查看数据在缓冲池中是否存在，如果缓冲池中没有，会直接从磁盘中加载到缓冲池中，而且会对这行数据添加独占锁。 innodb存储引擎innodb存储引擎 接着上面的继续，假设 id=10 这...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/database/mysql/advanced/innodb.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"【第三篇章】Innodb 存储引擎是怎么工作的"}],["meta",{"property":"og:description","content":"首先看一下这个 SQL 语句你会不会写? 下面是说明执行这个 SQL 语句，数据库底层做了什么操作。 在引擎要执行更新语句的时候，比如更新 id=10 这行数据时，他会先查看数据在缓冲池中是否存在，如果缓冲池中没有，会直接从磁盘中加载到缓冲池中，而且会对这行数据添加独占锁。 innodb存储引擎innodb存储引擎 接着上面的继续，假设 id=10 这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-09T09:53:56.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"mysql"}],["meta",{"property":"article:published_time","content":"2024-08-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-09T09:53:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【第三篇章】Innodb 存储引擎是怎么工作的\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-09T09:53:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1723197236000,"updatedTime":1723197236000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":1}]},"readingTime":{"minutes":2.07,"words":620},"filePathRelative":"database/mysql/advanced/innodb.md","localizedDate":"2024年8月9日","excerpt":"<p>首先看一下这个 SQL 语句你会不会写? 下面是说明执行这个 SQL 语句，数据库底层做了什么操作。</p>\\n<div class=\\"language-sql line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"sql\\" data-title=\\"sql\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    update</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> users </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">set</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> name</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'xxx'</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> where</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> id</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">10</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{u as comp,b as data};
