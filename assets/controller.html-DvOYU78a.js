import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as l}from"./app-DAKvw0bP.js";const n={};function t(h,s){return l(),e("div",null,s[0]||(s[0]=[a(`<p>csdn发布日期：2024-09-17</p><p>如果你对 Java 了解你可以把控制器当作和 <code>Controller</code> 层一样就行，用来接受请求和返回请求。</p><h2 id="一、使用-cli-创建控制器" tabindex="-1"><a class="header-anchor" href="#一、使用-cli-创建控制器"><span>一、使用 cli 创建控制器</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> g</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> controller</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [name] 命令即可</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="二、解释生成的代码" tabindex="-1"><a class="header-anchor" href="#二、解释生成的代码"><span>二、解释生成的代码</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Controller</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> }</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;@nestjs/common&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">@Controller(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&#39;demo&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> class</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> DemoController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Controller(&#39;&#39;)</code> 注解代表把这个文件标志为 <code>控制层</code>，<code>demo</code> 是把请求路径的一个分组。相当于 Java 中类上面标志 <code>@RequestMapping(&quot;demo&quot;)</code> 一样的效果。</p><h2 id="三、解释方法" tabindex="-1"><a class="header-anchor" href="#三、解释方法"><span>三、解释方法</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Controller,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> }</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;@nestjs/common&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">@Controller(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&#39;demo&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> class</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> DemoController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    @Get(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;findAll&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    findAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(): string {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;say demo&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面这个代码我们发现多了 <code>findAll()</code> 方法，<code>@Get(&quot;findAll&quot;)</code> 说的是本方法的请求方式是 get，请求路径是 <code>demo/findAll</code>。why? 你发现了什么？完整的请求路径是要将类上的请求路径和方法上的请求路径拼接到一起的。</p><h2 id="四、nest-提供的其他方法装饰器" tabindex="-1"><a class="header-anchor" href="#四、nest-提供的其他方法装饰器"><span>四、nest 提供的其他方法装饰器</span></a></h2><p><code>@Get()</code>、<code>@Post()</code>、<code>@Put()</code>、<code>@Delete()</code>、<code>@Patch()</code>、<code>@Options()</code> 和 <code>@Head()</code>。此外，<code>@All()</code> 定义了一个端点来处理所有这些。我们先记住有这些装饰器，后面会在使用的过程中一个个讲解。</p><h2 id="五、app-module-ts-中引入自定义控制器" tabindex="-1"><a class="header-anchor" href="#五、app-module-ts-中引入自定义控制器"><span>五、app.module.ts 中引入自定义控制器</span></a></h2><p>当我们编写好控制器之后，需要将控制器注册在 <code>app.modules.ts</code> 文件中。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Module</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> }</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;@nestjs/common&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> AppController</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> }</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./app.controller&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> AppService</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> }</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./app.service&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DemoController</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> }</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./demo/demo.controller&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">@Module(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  imports:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [],</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  controllers:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [AppController, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">DemoController],</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  providers:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [AppService],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> class</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> AppModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15)]))}const d=i(n,[["render",t],["__file","controller.html.vue"]]),k=JSON.parse(`{"path":"/nestJs/base/controller.html","title":"【第三篇章】控制器","lang":"zh-CN","frontmatter":{"title":"【第三篇章】控制器","index":false,"isOriginal":true,"category":"nestJs","tag":"nestJs基础","date":"2024-09-16T00:00:00.000Z","description":"csdn发布日期：2024-09-17 如果你对 Java 了解你可以把控制器当作和 Controller 层一样就行，用来接受请求和返回请求。 一、使用 cli 创建控制器 二、解释生成的代码 @Controller('') 注解代表把这个文件标志为 控制层，demo 是把请求路径的一个分组。相当于 Java 中类上面标志 @RequestMappi...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/nestJs/base/controller.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"【第三篇章】控制器"}],["meta",{"property":"og:description","content":"csdn发布日期：2024-09-17 如果你对 Java 了解你可以把控制器当作和 Controller 层一样就行，用来接受请求和返回请求。 一、使用 cli 创建控制器 二、解释生成的代码 @Controller('') 注解代表把这个文件标志为 控制层，demo 是把请求路径的一个分组。相当于 Java 中类上面标志 @RequestMappi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-18T03:17:32.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"nestJs基础"}],["meta",{"property":"article:published_time","content":"2024-09-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-18T03:17:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【第三篇章】控制器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-18T03:17:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、使用 cli 创建控制器","slug":"一、使用-cli-创建控制器","link":"#一、使用-cli-创建控制器","children":[]},{"level":2,"title":"二、解释生成的代码","slug":"二、解释生成的代码","link":"#二、解释生成的代码","children":[]},{"level":2,"title":"三、解释方法","slug":"三、解释方法","link":"#三、解释方法","children":[]},{"level":2,"title":"四、nest 提供的其他方法装饰器","slug":"四、nest-提供的其他方法装饰器","link":"#四、nest-提供的其他方法装饰器","children":[]},{"level":2,"title":"五、app.module.ts 中引入自定义控制器","slug":"五、app-module-ts-中引入自定义控制器","link":"#五、app-module-ts-中引入自定义控制器","children":[]}],"git":{"createdTime":1731899852000,"updatedTime":1731899852000,"contributors":[{"name":"tsing-dong","email":"ld320321@163.com","commits":1}]},"readingTime":{"minutes":1.23,"words":370},"filePathRelative":"nestJs/base/controller.md","localizedDate":"2024年9月16日","excerpt":"<p>csdn发布日期：2024-09-17</p>\\n<p>如果你对 Java 了解你可以把控制器当作和 <code>Controller</code> 层一样就行，用来接受请求和返回请求。</p>\\n<h2>一、使用 cli 创建控制器</h2>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">nest</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> g</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> controller</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> [name] 命令即可</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{d as comp,k as data};
