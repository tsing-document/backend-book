import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as a,a as t}from"./app-OXh1KHtv.js";const i="/backend-book/assets/lock-C6V6nec5.png",c={},r=t('<h2 id="一、分布式锁" tabindex="-1"><a class="header-anchor" href="#一、分布式锁"><span>一、分布式锁</span></a></h2><p>分布式锁是控制分布式系统之间同步访问共享资源的一种方式。</p><h2 id="二、zookeeper-分布式锁" tabindex="-1"><a class="header-anchor" href="#二、zookeeper-分布式锁"><span>二、zookeeper 分布式锁</span></a></h2><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>1、客户端A创建临时顺序节点 <code>demo</code>。并在节点下创建 <code>x_00000001</code>。</p><p>2、客户端A判断是否自己是第一个节点，如果是就锁成功。</p><p>3、客户端B创建临时顺序节点 <code>demo</code>。 并在节点下创建 <code>x_00000002</code>。</p><p>4、客户端B判读是否自己是第一个节点，如果是第一个节点，就加锁成功。如果不是第一个节点就会创建第二个节点，然后创建一个监听器，监听上一个节点。</p><p>5、客户端A执行完业务逻辑之后，会释放锁，并且会删除顺序节点 <code>x_00000001</code>。</p><p>6、zookeeper 服务器会通知客户端B，上级节点已经删除了。</p><p>7、客户端B会重新加锁。</p><h2 id="三、注意事项" tabindex="-1"><a class="header-anchor" href="#三、注意事项"><span>三、注意事项</span></a></h2><p>用临时顺序节点，如果某个客户端创建临时节点之后，不小心自己宕机了，zookeeper 服务器感知到哪个客户端宕机了，会自动删除对应的顺序节点。</p>',13),d=[r];function l(s,n){return a(),o("div",null,d)}const m=e(c,[["render",l],["__file","lock.html.vue"]]),k=JSON.parse('{"path":"/distributed/zookeeper/lock.html","title":"【第六篇章】分布式锁","lang":"zh-CN","frontmatter":{"title":"【第六篇章】分布式锁","index":false,"isOriginal":true,"category":"分布式技术","tag":"zookeeper","date":"2024-07-30T00:00:00.000Z","feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"一、分布式锁","slug":"一、分布式锁","link":"#一、分布式锁","children":[]},{"level":2,"title":"二、zookeeper 分布式锁","slug":"二、zookeeper-分布式锁","link":"#二、zookeeper-分布式锁","children":[]},{"level":2,"title":"三、注意事项","slug":"三、注意事项","link":"#三、注意事项","children":[]}],"git":{"createdTime":1722229665000,"updatedTime":1722229665000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":1}]},"readingTime":{"minutes":1.06,"words":317},"filePathRelative":"distributed/zookeeper/lock.md","localizedDate":"2024年7月30日"}');export{m as comp,k as data};
