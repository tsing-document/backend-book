import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as r,d as t}from"./app-BLiUdZAW.js";const n={},o=t('<h2 id="一、spring-freamework-有哪些不同的功能" tabindex="-1"><a class="header-anchor" href="#一、spring-freamework-有哪些不同的功能"><span>一、Spring Freamework 有哪些不同的功能？</span></a></h2><ul><li>轻量级：Spring 在代码量和透明度方面都很轻便。</li><li>IOC: 控制反转</li><li>AOP: 面向切面可以将应用业务逻辑和系统服务分离，以实现高内聚。</li><li>容器：Spring 负责创建和管理对象的声明周期和配置。</li><li>MVC: 对 web 应用提供了高度可配置性，其他框架集成也十分方便。</li><li>事务管理：提供了用于事务管理的通用抽象层。Spring 的事务支持也可用于容器较少的环境。</li><li>JDBC异常：Spring 的 JDBC 抽象层提供了一个异常层次结构，简化了错误处理策略。</li></ul><h2 id="二、什么是-spring-ioc-容器" tabindex="-1"><a class="header-anchor" href="#二、什么是-spring-ioc-容器"><span>二、什么是 Spring Ioc 容器？</span></a></h2><p>Spring 框架的核心是 Sping 容器。容器创建对象，将它们装配在一起，配置它们并管理它们的完整生命周期。Spring 容器使用依赖注入来管理组成应用程序的组件。容器通过读取提供的配置元数据来接收对象实例化，配置和组装的指令。</p><h2 id="三、依赖注入的方式有哪几种" tabindex="-1"><a class="header-anchor" href="#三、依赖注入的方式有哪几种"><span>三、依赖注入的方式有哪几种？</span></a></h2><ul><li>构造函数注入</li><li>setter 注入</li><li>接口注入</li></ul><h2 id="四、ioc-的好处和实现机制" tabindex="-1"><a class="header-anchor" href="#四、ioc-的好处和实现机制"><span>四、IOC 的好处和实现机制</span></a></h2><p>它将最小化应用程序中的代码量；它以最小的影响和最少的侵入机制促进松耦合；它支持即时实例化和延迟加载服务。</p><p>Spring 中 IOC 的实现原理就是工程模式加反射机制。</p><h2 id="五、-compoent、-controller、-repository、-service-有何区别" tabindex="-1"><a class="header-anchor" href="#五、-compoent、-controller、-repository、-service-有何区别"><span>五、@Compoent、@Controller、@Repository、@Service 有何区别？</span></a></h2><ul><li><p>@Compoent：这个注解是将类标记为 bean。它是任何 Spring 管理组件的通用构造型。Spring 的组件扫描机制现在可以将其拾取并将拉入应用程序环境中。</p></li><li><p>@Controller：这将一个类标记为 Spring Web MVC 控制器。标有它的 Bean 会自动导入到 IOC 容器中。</p></li><li><p>@Service：此注解是组件注解的特化。它不会对 <code>@Compoent</code> 注解提供任何其他行为。你可以在服务层类中使用它，而不是 <code>@Compoent</code>，因为它以更好的方式指名了意图。</p></li><li><p>@Repository：这个注解是具有类似用途何和功能的 <code>@Compoent</code> 注解的特化。它为 DAO 提供了额外的好处。它即将 DAO 导入 IOC 容器，并使未检查的异常有资格转换为 Spring DataAccessException。</p></li></ul><h2 id="六、-autowired-注解有什么用" tabindex="-1"><a class="header-anchor" href="#六、-autowired-注解有什么用"><span>六、@Autowired 注解有什么用？</span></a></h2><p>它可以准确的控制应该在何处以及如何进行自动装配。此注解用于在 setter 方法，构造函数，具有任意名称或多个参数的属性或者方法上自动装配 bean。默认情况下，它是类型驱动的注入。</p><h2 id="七、spring-支持的事务管理类型" tabindex="-1"><a class="header-anchor" href="#七、spring-支持的事务管理类型"><span>七、spring 支持的事务管理类型</span></a></h2><ul><li><p>程序化事务管理：在此过程中，在变成的帮助下管理事务，它为程序员提供了极大的灵活性。但是维护起来非常困难。</p></li><li><p>声明式事务管理：在此，事务管理和业务代码分离。仅使用注解或基于 XML 的配置来管理事务。</p></li></ul>',15),l=[o];function p(a,s){return r(),i("div",null,l)}const d=e(n,[["render",p],["__file","spring.html.vue"]]),h=JSON.parse('{"path":"/interview/spring.html","title":"Spring 🍉","lang":"zh-CN","frontmatter":{"title":"Spring 🍉","index":false,"isOriginal":true,"category":"面试宝典","tag":"spring","date":"2024-08-11T00:00:00.000Z","description":"一、Spring Freamework 有哪些不同的功能？ 轻量级：Spring 在代码量和透明度方面都很轻便。 IOC: 控制反转 AOP: 面向切面可以将应用业务逻辑和系统服务分离，以实现高内聚。 容器：Spring 负责创建和管理对象的声明周期和配置。 MVC: 对 web 应用提供了高度可配置性，其他框架集成也十分方便。 事务管理：提供了用于事...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/interview/spring.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"Spring 🍉"}],["meta",{"property":"og:description","content":"一、Spring Freamework 有哪些不同的功能？ 轻量级：Spring 在代码量和透明度方面都很轻便。 IOC: 控制反转 AOP: 面向切面可以将应用业务逻辑和系统服务分离，以实现高内聚。 容器：Spring 负责创建和管理对象的声明周期和配置。 MVC: 对 web 应用提供了高度可配置性，其他框架集成也十分方便。 事务管理：提供了用于事..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-12T10:35:38.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:published_time","content":"2024-08-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-12T10:35:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring 🍉\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-12T10:35:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、Spring Freamework 有哪些不同的功能？","slug":"一、spring-freamework-有哪些不同的功能","link":"#一、spring-freamework-有哪些不同的功能","children":[]},{"level":2,"title":"二、什么是 Spring Ioc 容器？","slug":"二、什么是-spring-ioc-容器","link":"#二、什么是-spring-ioc-容器","children":[]},{"level":2,"title":"三、依赖注入的方式有哪几种？","slug":"三、依赖注入的方式有哪几种","link":"#三、依赖注入的方式有哪几种","children":[]},{"level":2,"title":"四、IOC 的好处和实现机制","slug":"四、ioc-的好处和实现机制","link":"#四、ioc-的好处和实现机制","children":[]},{"level":2,"title":"五、@Compoent、@Controller、@Repository、@Service 有何区别？","slug":"五、-compoent、-controller、-repository、-service-有何区别","link":"#五、-compoent、-controller、-repository、-service-有何区别","children":[]},{"level":2,"title":"六、@Autowired 注解有什么用？","slug":"六、-autowired-注解有什么用","link":"#六、-autowired-注解有什么用","children":[]},{"level":2,"title":"七、spring 支持的事务管理类型","slug":"七、spring-支持的事务管理类型","link":"#七、spring-支持的事务管理类型","children":[]}],"git":{"createdTime":1723458938000,"updatedTime":1723458938000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":1}]},"readingTime":{"minutes":2.59,"words":776},"filePathRelative":"interview/spring.md","localizedDate":"2024年8月11日","excerpt":"<h2>一、Spring Freamework 有哪些不同的功能？</h2>\\n<ul>\\n<li>轻量级：Spring 在代码量和透明度方面都很轻便。</li>\\n<li>IOC: 控制反转</li>\\n<li>AOP: 面向切面可以将应用业务逻辑和系统服务分离，以实现高内聚。</li>\\n<li>容器：Spring 负责创建和管理对象的声明周期和配置。</li>\\n<li>MVC: 对 web 应用提供了高度可配置性，其他框架集成也十分方便。</li>\\n<li>事务管理：提供了用于事务管理的通用抽象层。Spring 的事务支持也可用于容器较少的环境。</li>\\n<li>JDBC异常：Spring 的 JDBC 抽象层提供了一个异常层次结构，简化了错误处理策略。</li>\\n</ul>","autoDesc":true}');export{d as comp,h as data};
