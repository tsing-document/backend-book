import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as n,a as r}from"./app-khcMKkJW.js";const i={},l=r('<h2 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述"><span>一、概述</span></a></h2><p>Spring 是一个广泛应用于企业级 Java 开发的开源框架，它提供了一种全面的、轻量级的解决方案来构建灵活、可维护和高效的应用程序。</p><h2 id="二、spring的核心的组件" tabindex="-1"><a class="header-anchor" href="#二、spring的核心的组件"><span>二、Spring的核心的组件</span></a></h2><table><thead><tr><th style="text-align:center;">核心模块名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">Spring IOC</td><td style="text-align:left;">包含了最为基本的Ioc容器BeanFactory的接口和实现，也就是说，在这个Spring的核心包中，不仅定义了IOC容器的最基本的接口（BeanFactory），也提供了一系列这个接口的实现，如XmlBeanFactory就是一个最基本的BeanFactory（IOC容器）。</td></tr><tr><td style="text-align:center;">Spring Aop</td><td style="text-align:left;">这也是Spring的核心模块，围绕这个AOP的增强功能，Spring 集成了AspectJ作为AOP的一个特定实现，同时还在JVM动态代理、CGLIB的基础之上，实现了一个AOP框架。作为Spring集成其他模块的工具，比如<code>事务</code> 就是通过AOP集成到项目中的。</td></tr><tr><td style="text-align:center;">Spring MVC</td><td style="text-align:left;">Spring MVC 是以DispatcherServerlet为核心，实现了MVC模式，包括怎样和web容器环境的集成，web 请求的拦截、分发、处理和ModelAndView 数据的返回，以及如何集成各种UI视图展示和数据表现。</td></tr><tr><td style="text-align:center;">Spring JDBC/Spring ORM</td><td style="text-align:left;">Spring JDBC主要封装了对数据库的操作。 Spring ORM主要是将从数据库中查出来的数据，映射到对象中。</td></tr><tr><td style="text-align:center;">Spring事务处理</td><td style="text-align:left;">Spring 事务处理是一个通过Spring AOP实现自身功能增强的典型模块。</td></tr><tr><td style="text-align:center;">Spring 远程调用</td><td style="text-align:left;">Spring 为应用带来的一个好处就是能够将应用解耦。应用解耦，一方面可以降低设计的复杂性，另一方面，可以在解耦以后将应用模块分布式部署，从而提高系统整体的性能。</td></tr><tr><td style="text-align:center;">Spring应用</td><td style="text-align:left;">从严格意义来说，这个模块不属于spring模块，这个部分是扩展的spring。</td></tr></tbody></table><h2 id="三、核心概念和特点" tabindex="-1"><a class="header-anchor" href="#三、核心概念和特点"><span>三、核心概念和特点</span></a></h2><h3 id="_1、依赖注入-dependency-injection-di" tabindex="-1"><a class="header-anchor" href="#_1、依赖注入-dependency-injection-di"><span>1、依赖注入 （Dependency Injection，DI）</span></a></h3><ul><li>概念</li></ul><p>这是 Spring 的核心特性之一。它允许对象之间的依赖关系在运行时由容器自动注入，而不是在代码中显式地创建依赖对象。例如，一个Service类可能依赖于一个DAO（数据访问对象）类，在传统方式下，Service类可能需要在其内部实例化DAO对象。但在 Spring 中，通过依赖注入，容器会自动将DAO对象实例传递给Service类，Service类只需要接收这个已经实例化好的DAO对象即可。</p><ul><li>作用</li></ul><p>提高代码的可测试性：因为对象的依赖关系是通过外部配置而不是硬编码在代码中，所以在单元测试中可以方便地替换模拟对象来测试Service类的功能，而不需要关心DAO对象的具体实现。</p><p>降低代码的耦合度：各个组件之间的依赖关系更加清晰和松散，使得代码更容易维护和扩展。当需要更换DAO的实现或者添加新的功能时，只需要修改配置文件，而不需要修改Service类的代码。</p><h3 id="_2、面向切面-aspect-oriented-programming-aop" tabindex="-1"><a class="header-anchor" href="#_2、面向切面-aspect-oriented-programming-aop"><span>2、面向切面（Aspect Oriented Programming，AOP）</span></a></h3><ul><li>概念</li></ul><p>AOP 是一种编程范式，它允许开发者将横切关注点（如日志记录、事务管理、安全检查等）与业务逻辑分离。在 Spring 中，通过 AOP 可以将这些横切关注点定义为切面，然后在不修改业务代码的情况下，将切面应用到目标对象（被增强的对象）上。</p><ul><li>作用：</li></ul><p>代码复用：例如，对于日志记录功能，不需要在每个业务方法中重复编写日志记录代码，而是通过定义一个日志切面，将日志记录逻辑集中在一处，然后应用到多个需要记录日志的方法上。</p><p>清晰的关注点分离：业务逻辑代码可以更加专注于核心业务功能，而将非业务相关的横切关注点（如事务处理、安全等）从业务代码中分离出来，提高代码的可读性和可维护性。</p><h3 id="_3、控制反转-inversion-of-control-ioc-容器" tabindex="-1"><a class="header-anchor" href="#_3、控制反转-inversion-of-control-ioc-容器"><span>3、控制反转（Inversion of Control，IoC）容器</span></a></h3><ul><li>概念</li></ul><p>Spring 框架是一个 IoC 容器，它负责创建、管理和组装应用程序中的对象。IoC 是一种设计模式，它将对象的创建和依赖关系的管理从应用程序代码转移到容器中。容器根据配置文件或注解等信息，自动创建对象并注入它们之间的依赖关系。</p><ul><li>作用</li></ul><p>简化对象管理：开发者不需要手动实例化和管理对象的生命周期，容器会负责这些工作。例如，当一个对象需要另一个对象作为依赖时，容器会自动创建并提供这个依赖对象，开发者只需要关注对象的使用，而不是创建过程。</p><p>提高代码的可维护性：由于对象的创建和管理集中在容器中，当应用程序的结构发生变化时，只需要修改容器的配置，而不需要在大量的代码中进行修改。</p><ul><li>IOC 实现策略</li></ul><p><strong>依赖查找（Dependency Lookup）</strong></p><ul><li><strong>原理</strong>： <ul><li>容器会向组件提供回调接口和上下文条件。在这种模式下，组件自身需要通过容器提供的特定 API 来主动查找其所需要的资源和协作对象。</li><li>虽然名为控制反转，但实际上真正体现控制反转的部分相对有限，主要只体现在容器会调用组件的回调方法这一点上。通过这种方式，当容器调用回调方法时，应用代码才能够获得相关的资源。</li></ul></li><li><strong>举例</strong>： <ul><li>以 EJB（Enterprise JavaBeans）为例，EJB 组件可能需要通过 EJB 容器提供的特定接口和方法来查找数据库连接等资源。比如，一个 EJB 组件要访问数据库，它可能需要使用 EJB 容器提供的查找方法来获取数据库连接对象，而不是自己直接去创建连接。类似地，在 Apache Avalon 框架中，组件也需要通过 Avalon 容器提供的方式来查找其依赖的其他组件或资源。</li></ul></li><li><strong>特点</strong>： <ul><li>这种方式要求组件对容器有一定的了解，因为它需要使用容器提供的 API 进行资源查找。并且在一定程度上，组件还是有一些主动查找资源的行为，控制反转没有那么彻底。</li></ul></li></ul><p><strong>依赖注入（Dependency Injection）</strong></p><ul><li><strong>原理</strong>： <ul><li>组件自身不需要进行定位查询来获取其依赖的对象。它只需要提供普通的 Java 方法（比如设值方法或构造函数），然后由容器来全权负责组件的装配工作。</li><li>容器会根据组件之间的依赖关系，将符合要求的对象通过 JavaBean 属性（设值方法注入）或者构造函数（构造器注入）传递给需要的对象。这样组件就不需要关心如何获取其依赖的对象，完全由容器来处理。</li></ul></li><li><strong>设值方法注入（Setter Injection）</strong>： <ul><li>例如有一个<code>UserService</code>类，它依赖于一个<code>UserDao</code>对象来进行数据库操作。在设值方法注入中，<code>UserService</code>类会有一个<code>setUserDao</code>的设值方法。容器在创建<code>UserService</code>对象之后，会将一个已经实例化好的<code>UserDao</code>对象通过调用<code>setUserDao</code>方法传递给<code>UserService</code>对象，从而建立依赖关系。这样，<code>UserService</code>类就可以使用注入的<code>UserDao</code>对象来执行数据库相关的操作，而不需要自己去创建<code>UserDao</code>对象。</li></ul></li><li><strong>构造器注入（Constructor Injection）</strong>： <ul><li>还是以<code>UserService</code>为例，它的构造函数可以接收一个<code>UserDao</code>对象作为参数。当容器创建<code>UserService</code>对象时，会通过构造函数将一个<code>UserDao</code>对象实例传递进去。这样在<code>UserService</code>对象创建时就已经建立了与<code>UserDao</code>对象的依赖关系。比如<code>UserService</code>的构造函数可能定义为<code>public UserService(UserDao userDao)</code>，容器会创建一个<code>UserDao</code>对象并将其作为参数传递给<code>UserService</code>的构造函数来创建<code>UserService</code>对象。</li></ul></li><li><strong>特点</strong>： <ul><li>依赖注入方式使得组件与容器之间的耦合度更低，组件更专注于自身的业务逻辑，而依赖关系的建立完全由容器负责，实现了更彻底的控制反转。它提高了代码的可测试性和可维护性，因为在测试时可以方便地通过模拟依赖对象来测试组件的功能，而不需要依赖实际的复杂依赖关系。</li></ul></li></ul><h2 id="四、spring-优点" tabindex="-1"><a class="header-anchor" href="#四、spring-优点"><span>四、spring 优点</span></a></h2><p>低侵入式设计，代码的污染极低。将对象的管理交给框架处理，减低组件的耦合性。良好的提供了AOP技术。对主流框架的良好的整合和集成。</p>',30),o=[l];function a(c,d){return n(),t("div",null,o)}const g=e(i,[["render",a],["__file","spring.html.vue"]]),h=JSON.parse('{"path":"/java/advanced/spring.html","title":"【第十一篇章】Spring 框架介绍","lang":"zh-CN","frontmatter":{"title":"【第十一篇章】Spring 框架介绍","index":false,"isOriginal":true,"category":"JAVA","tag":"Java进阶","date":"2024-08-07T00:00:00.000Z","description":"一、概述 Spring 是一个广泛应用于企业级 Java 开发的开源框架，它提供了一种全面的、轻量级的解决方案来构建灵活、可维护和高效的应用程序。 二、Spring的核心的组件 三、核心概念和特点 1、依赖注入 （Dependency Injection，DI） 概念 这是 Spring 的核心特性之一。它允许对象之间的依赖关系在运行时由容器自动注入，...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/java/advanced/spring.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"【第十一篇章】Spring 框架介绍"}],["meta",{"property":"og:description","content":"一、概述 Spring 是一个广泛应用于企业级 Java 开发的开源框架，它提供了一种全面的、轻量级的解决方案来构建灵活、可维护和高效的应用程序。 二、Spring的核心的组件 三、核心概念和特点 1、依赖注入 （Dependency Injection，DI） 概念 这是 Spring 的核心特性之一。它允许对象之间的依赖关系在运行时由容器自动注入，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-07T11:32:09.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"Java进阶"}],["meta",{"property":"article:published_time","content":"2024-08-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-07T11:32:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【第十一篇章】Spring 框架介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-07T11:32:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、概述","slug":"一、概述","link":"#一、概述","children":[]},{"level":2,"title":"二、Spring的核心的组件","slug":"二、spring的核心的组件","link":"#二、spring的核心的组件","children":[]},{"level":2,"title":"三、核心概念和特点","slug":"三、核心概念和特点","link":"#三、核心概念和特点","children":[{"level":3,"title":"1、依赖注入 （Dependency Injection，DI）","slug":"_1、依赖注入-dependency-injection-di","link":"#_1、依赖注入-dependency-injection-di","children":[]},{"level":3,"title":"2、面向切面（Aspect Oriented Programming，AOP）","slug":"_2、面向切面-aspect-oriented-programming-aop","link":"#_2、面向切面-aspect-oriented-programming-aop","children":[]},{"level":3,"title":"3、控制反转（Inversion of Control，IoC）容器","slug":"_3、控制反转-inversion-of-control-ioc-容器","link":"#_3、控制反转-inversion-of-control-ioc-容器","children":[]}]},{"level":2,"title":"四、spring 优点","slug":"四、spring-优点","link":"#四、spring-优点","children":[]}],"git":{"createdTime":1723030329000,"updatedTime":1723030329000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":1}]},"readingTime":{"minutes":7.59,"words":2276},"filePathRelative":"java/advanced/spring.md","localizedDate":"2024年8月7日","excerpt":"<h2>一、概述</h2>\\n<p>Spring 是一个广泛应用于企业级 Java 开发的开源框架，它提供了一种全面的、轻量级的解决方案来构建灵活、可维护和高效的应用程序。</p>\\n<h2>二、Spring的核心的组件</h2>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:center\\">核心模块名称</th>\\n<th style=\\"text-align:left\\">描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:center\\">Spring IOC</td>\\n<td style=\\"text-align:left\\">包含了最为基本的Ioc容器BeanFactory的接口和实现，也就是说，在这个Spring的核心包中，不仅定义了IOC容器的最基本的接口（BeanFactory），也提供了一系列这个接口的实现，如XmlBeanFactory就是一个最基本的BeanFactory（IOC容器）。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Spring Aop</td>\\n<td style=\\"text-align:left\\">这也是Spring的核心模块，围绕这个AOP的增强功能，Spring 集成了AspectJ作为AOP的一个特定实现，同时还在JVM动态代理、CGLIB的基础之上，实现了一个AOP框架。作为Spring集成其他模块的工具，比如<code>事务</code> 就是通过AOP集成到项目中的。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Spring MVC</td>\\n<td style=\\"text-align:left\\">Spring MVC 是以DispatcherServerlet为核心，实现了MVC模式，包括怎样和web容器环境的集成，web 请求的拦截、分发、处理和ModelAndView  数据的返回，以及如何集成各种UI视图展示和数据表现。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Spring JDBC/Spring ORM</td>\\n<td style=\\"text-align:left\\">Spring  JDBC主要封装了对数据库的操作。                                                                                                                                                            Spring ORM主要是将从数据库中查出来的数据，映射到对象中。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Spring事务处理</td>\\n<td style=\\"text-align:left\\">Spring 事务处理是一个通过Spring AOP实现自身功能增强的典型模块。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Spring 远程调用</td>\\n<td style=\\"text-align:left\\">Spring 为应用带来的一个好处就是能够将应用解耦。应用解耦，一方面可以降低设计的复杂性，另一方面，可以在解耦以后将应用模块分布式部署，从而提高系统整体的性能。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Spring应用</td>\\n<td style=\\"text-align:left\\">从严格意义来说，这个模块不属于spring模块，这个部分是扩展的spring。</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{g as comp,h as data};
