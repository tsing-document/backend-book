import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as i,a}from"./app-BlqCWX_n.js";const s={},n=a('<h2 id="一、什么是-mybatis" tabindex="-1"><a class="header-anchor" href="#一、什么是-mybatis"><span>一、什么是 MyBatis?</span></a></h2><p>1、MyBatis 是一个半 ORM (对象关系映射) 框架，它内部封装了 JDBC, 开发时只需要关注 SQL 语句本身，不需要花费精力处理加载驱动、创建连接、创建 statement 等复杂的过程。程序员直接编写原生 SQL, 可以严格控制 SQL 执行性能，灵活度高。</p><p>2、MyBatis 可以使用 XML 或注解来配置和映射原生信息，将 POJO 映射数据库中记录。避免了大部分的 JDBC 代码和手动设置参数以及获取结果集。</p><h2 id="二、mybatis-的优点" tabindex="-1"><a class="header-anchor" href="#二、mybatis-的优点"><span>二、MyBatis 的优点</span></a></h2><p>1、基于 SQL 语句编程，只要你对 SQL 语句熟悉就已经成功了大半。因为 SQL 写在 XML 中，解除了 SQL 和程序代码的耦合，便于统一管理；提供 XML 标签，支持编写动态 SQL 语句，并且可以重用。</p><p>2、和 JDBC 相比，减少了大部分的冗余代码，消除了 JDBC 大量冗余的代码。不需要手动开关连接。</p><p>3、数据库兼容性特别高（因为 MyBatis 使用 JDBC 来连接数据库，所以只要 JDBC 支持的数据库 MyBatis 都支持）。</p><p>4、和 Spring 框架能够更好的集成。</p><h2 id="三、mybatis-框架的缺点" tabindex="-1"><a class="header-anchor" href="#三、mybatis-框架的缺点"><span>三、MyBatis 框架的缺点</span></a></h2><p>1、SQL 语句编写工作量较大。尤其当字段多、关联表多时。对开发人员编写 SQL 语句的功底有一定的要求。</p><p>2、SQL 语句依赖数据库，导致数据库移植性差，不能随意更换数据库。</p><h2 id="四、mybatis-和-hibernate-有哪些不同" tabindex="-1"><a class="header-anchor" href="#四、mybatis-和-hibernate-有哪些不同"><span>四、MyBatis 和 Hibernate 有哪些不同？</span></a></h2><p>1、MyBatis 和 Hibernate 不同的是，MyBatis 是一个半 ORM 框架，因为 MyBatis 需要程序员自己编写 SQL 语句。</p><p>2、MyBatis 直接编写原生 SQL, 可以严格控制 SQL 执行性能，灵活度高。适合对关系数据模型要求不高的软件开发，因为这种系统需求变化频繁，一旦需求变化需要迅速输出成果。但是 MyBatis 做不到数据库无关性，如果需要多种数据库连接，需要自定义多套 SQL 映射文件。</p><p>3、Hibernate 对象关系映射能力强，数据库无关性好，对于关系模型要求高的系统，Hibernate 可以节省很多代码。</p><h2 id="五、-和-的区别是什么" tabindex="-1"><a class="header-anchor" href="#五、-和-的区别是什么"><span>五、#{} 和 ${} 的区别是什么？</span></a></h2><p>#{} 是预编译处理、${} 是字符串替换。MyBatis 在处理 #{} 时，会将 SQL 中的 #{} 替换为 ？号，调用 PreparedStatement 的 set 方法赋值。在处理 ${} 时，直接把 ${} 替换成实际的值。 使用 #{} 可以防止有效的 SQL 注入，提高系统的安全性。</p><h2 id="六、mybatis-是如何进行分页的-分页插件的原理是什么" tabindex="-1"><a class="header-anchor" href="#六、mybatis-是如何进行分页的-分页插件的原理是什么"><span>六、MyBatis 是如何进行分页的？分页插件的原理是什么？</span></a></h2><p>MyBatis 使用 RowBounds 对象进行分页，它是针对 ResultSet 结果集执行的内存分页，不是非物理分页。可以在 SQL 内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。</p><p>分页插件的基本原理是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 SQL, 然后重写 SQL 根据 dialect 方言，添加对应的物理分页语句语句和物理分页参数。</p><h2 id="七、mybatis-的一级缓存、二级缓存" tabindex="-1"><a class="header-anchor" href="#七、mybatis-的一级缓存、二级缓存"><span>七、MyBatis 的一级缓存、二级缓存</span></a></h2><p>MyBatis 提供了两级缓存机制：一级缓存（Local Cache）和二级缓存（Secondary Cache）。这两级缓存机制在优化数据库查询、提高应用程序性能方面起着重要作用。</p><p>1、一级缓存（Local Cache）</p><p>一级缓存是 MyBatis 的默认缓存机制，它是基于 SqlSession 的，也就是说，每个 SqlSession 都会有一个独立的一级缓存区域。一级缓存的作用域是 SqlSession 级别的，当在同一个 SqlSession 中执行相同的查询时，MyBatis 会从一级缓存中直接返回结果，而不会再次查询数据库，从而提高了查询效率。</p><p><strong>特点</strong>：</p><ul><li><strong>作用域</strong>：SqlSession 级别。</li><li><strong>生命周期</strong>：与 SqlSession 生命周期相同，当 SqlSession 关闭或提交事务后，一级缓存中的数据会被清空。</li><li><strong>数据共享</strong>：只在当前 SqlSession 内部共享数据。</li></ul><p><strong>注意事项</strong>：</p><ul><li>当执行更新、删除、插入操作时，MyBatis 会清空当前 SqlSession 的一级缓存，以保证缓存数据与数据库的一致性。</li><li>不同的 SqlSession 之间的一级缓存是互相隔离的。</li></ul><p>2、 二级缓存（Secondary Cache）</p><p>二级缓存是跨 SqlSession 的，它的作用域是 Mapper 映射文件级别的。多个 SqlSession 可以共享同一个二级缓存区域的数据。当多个 SqlSession 执行相同的查询时，如果二级缓存开启且数据未过期，MyBatis 会直接从二级缓存中返回结果，避免了多次查询数据库。</p><p><strong>特点</strong>：</p><ul><li><strong>作用域</strong>：Mapper 映射文件级别（可以细粒度到 namespace）。</li><li><strong>生命周期</strong>：依赖于 MyBatis 的配置文件和具体的缓存实现，可以配置缓存的过期时间等。</li><li><strong>数据共享</strong>：多个 SqlSession 可以共享同一个二级缓存中的数据。</li></ul><p><strong>开启和使用二级缓存的步骤</strong>：</p><ol><li>在 mybatis-config.xml 配置文件中开启二级缓存支持。</li><li>在 Mapper 映射文件中使用 <code>&lt;cache/&gt;</code> 标签来启用二级缓存。</li><li>序列化：由于二级缓存数据是跨 SqlSession 的，所以存储在二级缓存中的数据必须是可序列化的。</li><li>注意事项：当更新数据时，需要手动清空二级缓存或配置缓存策略（如使用 Redis、Ehcache 等外部缓存时）以保证数据一致性。</li></ol><p><strong>注意事项</strong>：</p><ul><li>并非所有的查询都适合使用二级缓存，对于频繁变动的数据，使用二级缓存可能会带来数据一致性问题。</li><li>在分布式系统中，二级缓存可能需要配合分布式缓存解决方案（如 Redis）来实现。</li></ul><p>综上所述，MyBatis 的一级缓存和二级缓存各有其特点和适用场景。在实际应用中，可以根据具体需求和数据特性来选择合适的缓存策略，以达到最优的性能和数据一致性。</p>',37),l=[n];function r(p,o){return i(),e("div",null,l)}const m=t(s,[["render",r],["__file","mybatis_upper.html.vue"]]),h=JSON.parse('{"path":"/interview/mybatis/mybatis_upper.html","title":"🐦面试题总结(上)","lang":"zh-CN","frontmatter":{"title":"🐦面试题总结(上)","index":false,"isOriginal":true,"category":"面试宝典","tag":"mybatis","date":"2024-08-11T00:00:00.000Z","description":"一、什么是 MyBatis? 1、MyBatis 是一个半 ORM (对象关系映射) 框架，它内部封装了 JDBC, 开发时只需要关注 SQL 语句本身，不需要花费精力处理加载驱动、创建连接、创建 statement 等复杂的过程。程序员直接编写原生 SQL, 可以严格控制 SQL 执行性能，灵活度高。 2、MyBatis 可以使用 XML 或注解来配...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/interview/mybatis/mybatis_upper.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"🐦面试题总结(上)"}],["meta",{"property":"og:description","content":"一、什么是 MyBatis? 1、MyBatis 是一个半 ORM (对象关系映射) 框架，它内部封装了 JDBC, 开发时只需要关注 SQL 语句本身，不需要花费精力处理加载驱动、创建连接、创建 statement 等复杂的过程。程序员直接编写原生 SQL, 可以严格控制 SQL 执行性能，灵活度高。 2、MyBatis 可以使用 XML 或注解来配..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-13T13:13:27.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"mybatis"}],["meta",{"property":"article:published_time","content":"2024-08-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-13T13:13:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"🐦面试题总结(上)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-13T13:13:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、什么是 MyBatis?","slug":"一、什么是-mybatis","link":"#一、什么是-mybatis","children":[]},{"level":2,"title":"二、MyBatis 的优点","slug":"二、mybatis-的优点","link":"#二、mybatis-的优点","children":[]},{"level":2,"title":"三、MyBatis 框架的缺点","slug":"三、mybatis-框架的缺点","link":"#三、mybatis-框架的缺点","children":[]},{"level":2,"title":"四、MyBatis 和 Hibernate 有哪些不同？","slug":"四、mybatis-和-hibernate-有哪些不同","link":"#四、mybatis-和-hibernate-有哪些不同","children":[]},{"level":2,"title":"五、#{} 和 ${} 的区别是什么？","slug":"五、-和-的区别是什么","link":"#五、-和-的区别是什么","children":[]},{"level":2,"title":"六、MyBatis 是如何进行分页的？分页插件的原理是什么？","slug":"六、mybatis-是如何进行分页的-分页插件的原理是什么","link":"#六、mybatis-是如何进行分页的-分页插件的原理是什么","children":[]},{"level":2,"title":"七、MyBatis 的一级缓存、二级缓存","slug":"七、mybatis-的一级缓存、二级缓存","link":"#七、mybatis-的一级缓存、二级缓存","children":[]}],"git":{"createdTime":1723311809000,"updatedTime":1723554807000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":1}]},"readingTime":{"minutes":5.23,"words":1570},"filePathRelative":"interview/mybatis/mybatis_upper.md","localizedDate":"2024年8月11日","excerpt":"<h2>一、什么是 MyBatis?</h2>\\n<p>1、MyBatis 是一个半 ORM (对象关系映射) 框架，它内部封装了 JDBC, 开发时只需要关注 SQL 语句本身，不需要花费精力处理加载驱动、创建连接、创建 statement 等复杂的过程。程序员直接编写原生 SQL, 可以严格控制 SQL 执行性能，灵活度高。</p>\\n<p>2、MyBatis 可以使用 XML 或注解来配置和映射原生信息，将 POJO 映射数据库中记录。避免了大部分的 JDBC 代码和手动设置参数以及获取结果集。</p>\\n<h2>二、MyBatis 的优点</h2>\\n<p>1、基于 SQL 语句编程，只要你对 SQL 语句熟悉就已经成功了大半。因为 SQL 写在 XML 中，解除了 SQL 和程序代码的耦合，便于统一管理；提供 XML 标签，支持编写动态 SQL 语句，并且可以重用。</p>","autoDesc":true}');export{m as comp,h as data};
