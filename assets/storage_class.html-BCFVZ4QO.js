import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as l,a as i}from"./app-CHGpPznX.js";const a={},o=i('<h2 id="一、存储类" tabindex="-1"><a class="header-anchor" href="#一、存储类"><span>一、存储类</span></a></h2><p><code>存储类</code> 定义 c++ 程序中变量/函数的范围（可见性）和生命周期，这些说明符放在它们所修饰的类型之前。</p><ul><li><code>auto:</code> 这是默认的存储类说明符，通常可以省略不写。auto 指定的变量具有自动存续期，即它们的生命周期仅限于定义它们的块。</li><li><code>static:</code> 用于定义具有静态存储期的变量和函数，它们的生命周期贯穿整个程序的运行期。在函数内部，static变量的值在函数调用之间保持不变，在文件内部或全局作用域，static变量具有内部连接，只能在定义它们的文件中访问。</li><li><code>extern:</code> 用于声明具有外部连接的变量或函数，它们可以在多个文件之间共享。默认情况下，全局变量和函数具有 extern 存储类。在一个文件中实用 extern 声明，另一个文件中定义的全局变量或函数，可以实现跨文件共享。</li><li><code>mutable(c++11):</code> 用于修饰类中成员变量，允许在const成员函数中修改这些变量的值。通常用于缓存或计数器等需要在 const 上下文中修改的数据。</li><li><code>thread_local(c++11):</code> 用于定义具有线程局部存储期的变量，每个线程都有自己的独立副本。线程局部变量的声明周期与线程的声明周期相同。</li></ul><h2 id="二、运算符" tabindex="-1"><a class="header-anchor" href="#二、运算符"><span>二、运算符</span></a></h2><h3 id="_1、算术运算符" tabindex="-1"><a class="header-anchor" href="#_1、算术运算符"><span>1、算术运算符</span></a></h3><ul><li><ul><li>把两个操作数相加。</li></ul></li><li><ul><li>从第一个操作数中减掉第二个操作数。</li></ul></li><li><ul><li>把两个操作数相乘。</li></ul></li><li>/ 分子除以分母。</li><li>% 取模运算符，整除后的余数。</li><li>++ 自增运算符，整数数值加1。</li><li>-- 自减运算符，整数数值减1。</li></ul><h3 id="_2、关系运算符" tabindex="-1"><a class="header-anchor" href="#_2、关系运算符"><span>2、关系运算符</span></a></h3><ul><li>== 检查两个操作数的值是否相等，如果条件相等条件为真。</li><li>!= 检查两个操作数的值是否相等，如果条件不相等条件为真。</li><li><blockquote><p>检查左操作数的值是否大于右操作数的值，如果 是 条件为真。</p></blockquote></li><li>&lt; 检查左操作数的值是否小于右操作数的值，如果 是 条件为真。</li><li><blockquote><p>= 检查左操作数的值是否大于或者等于右操作数的值，如果 是 则条件为真。</p></blockquote></li><li>&lt;= 检查左操作数的值是否小于或者等于右操作数的值，如果 是 则条件为真。</li></ul><h3 id="_3、逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_3、逻辑运算符"><span>3、逻辑运算符</span></a></h3><ul><li>&amp;&amp; 称为逻辑运算符，如果两个操作数都为 true，则条件为真。</li><li>|| 称为 逻辑或 运算符。如果两个操作数中任意一个为 true，则条件为 true。</li><li>! 称为逻辑非运算符，用来逆转操作数的逻辑状态，如果条件为真则逻辑非运算符将使其为 false。</li></ul>',10),c=[o];function n(r,s){return l(),t("div",null,c)}const h=e(a,[["render",n],["__file","storage_class.html.vue"]]),u=JSON.parse('{"path":"/c/base/storage_class.html","title":"【第三篇章】 存储类和运算符","lang":"zh-CN","frontmatter":{"title":"【第三篇章】 存储类和运算符","index":false,"isOriginal":true,"category":"c++","tag":"c++","date":"2025-02-10T00:00:00.000Z","description":"一、存储类 存储类 定义 c++ 程序中变量/函数的范围（可见性）和生命周期，这些说明符放在它们所修饰的类型之前。 auto: 这是默认的存储类说明符，通常可以省略不写。auto 指定的变量具有自动存续期，即它们的生命周期仅限于定义它们的块。 static: 用于定义具有静态存储期的变量和函数，它们的生命周期贯穿整个程序的运行期。在函数内部，stati...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/c/base/storage_class.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"【第三篇章】 存储类和运算符"}],["meta",{"property":"og:description","content":"一、存储类 存储类 定义 c++ 程序中变量/函数的范围（可见性）和生命周期，这些说明符放在它们所修饰的类型之前。 auto: 这是默认的存储类说明符，通常可以省略不写。auto 指定的变量具有自动存续期，即它们的生命周期仅限于定义它们的块。 static: 用于定义具有静态存储期的变量和函数，它们的生命周期贯穿整个程序的运行期。在函数内部，stati..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-12T03:25:35.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"c++"}],["meta",{"property":"article:published_time","content":"2025-02-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-12T03:25:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【第三篇章】 存储类和运算符\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-12T03:25:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、存储类","slug":"一、存储类","link":"#一、存储类","children":[]},{"level":2,"title":"二、运算符","slug":"二、运算符","link":"#二、运算符","children":[{"level":3,"title":"1、算术运算符","slug":"_1、算术运算符","link":"#_1、算术运算符","children":[]},{"level":3,"title":"2、关系运算符","slug":"_2、关系运算符","link":"#_2、关系运算符","children":[]},{"level":3,"title":"3、逻辑运算符","slug":"_3、逻辑运算符","link":"#_3、逻辑运算符","children":[]}]}],"git":{"createdTime":1739158455000,"updatedTime":1739330735000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":1},{"name":"tsing-dong","email":"ld320321@163.com","commits":1}]},"readingTime":{"minutes":2.46,"words":738},"filePathRelative":"c/base/storage_class.md","localizedDate":"2025年2月10日","excerpt":"<h2>一、存储类</h2>\\n<p><code>存储类</code> 定义 c++ 程序中变量/函数的范围（可见性）和生命周期，这些说明符放在它们所修饰的类型之前。</p>\\n<ul>\\n<li><code>auto:</code> 这是默认的存储类说明符，通常可以省略不写。auto 指定的变量具有自动存续期，即它们的生命周期仅限于定义它们的块。</li>\\n<li><code>static:</code> 用于定义具有静态存储期的变量和函数，它们的生命周期贯穿整个程序的运行期。在函数内部，static变量的值在函数调用之间保持不变，在文件内部或全局作用域，static变量具有内部连接，只能在定义它们的文件中访问。</li>\\n<li><code>extern:</code> 用于声明具有外部连接的变量或函数，它们可以在多个文件之间共享。默认情况下，全局变量和函数具有 extern 存储类。在一个文件中实用 extern 声明，另一个文件中定义的全局变量或函数，可以实现跨文件共享。</li>\\n<li><code>mutable(c++11):</code> 用于修饰类中成员变量，允许在const成员函数中修改这些变量的值。通常用于缓存或计数器等需要在 const 上下文中修改的数据。</li>\\n<li><code>thread_local(c++11):</code> 用于定义具有线程局部存储期的变量，每个线程都有自己的独立副本。线程局部变量的声明周期与线程的声明周期相同。</li>\\n</ul>","autoDesc":true}');export{h as comp,u as data};
