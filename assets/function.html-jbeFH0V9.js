import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-ioGy9IPI.js";const e={};function t(h,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="一、函数" tabindex="-1"><a class="header-anchor" href="#一、函数"><span>一、函数</span></a></h2><p>函数是一组一起执行一个任务的语句，每个 c++ 程序至少有一个函数，即主函数 <code>main()</code>，所有简单的程序都可以定义其他额外的函数。 函数声明告诉编译器函数的名称、返回类型、参数。函数定义提供了函数的实际主体。</p><h2 id="二、声明函数" tabindex="-1"><a class="header-anchor" href="#二、声明函数"><span>二、声明函数</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">return_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> function_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">paramter</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  body</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> function</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、调用函数" tabindex="-1"><a class="header-anchor" href="#三、调用函数"><span>三、调用函数</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#include &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">using</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> namespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 函数声明</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> num1,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> num2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 局部变量声明</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ret</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 调用函数来获取最大值</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   ret</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">a,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   cout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;&lt; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;Max value is : &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;&lt; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ret</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;&lt; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">endl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   return 0;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">// 函数返回两个数中较大的那个数</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">int max(int num1, int num2) </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   // 局部变量声明</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   int result;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   if (num1 &gt; num2)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      result = num1;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   else</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      result = num2;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   return result; </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、函数参数" tabindex="-1"><a class="header-anchor" href="#四、函数参数"><span>四、函数参数</span></a></h2><p>如果函数要实用参数，则必须声明接收参数值的变量。这些变量称为函数的形式参数。形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。当调用函数时，有三种向函数传递参数的方式：</p><ul><li><code>传值调用：</code> 该方法把参数的实际值赋值给函数的形式参数，在这种情况下，修改函数内形式参数对实际参数没有影响。</li><li><code>指针调用：</code> 该方法把参数的地址赋值给形式参数，在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</li><li><code>引用调用：</code> 该方法把参数的引用赋值给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</li></ul><h2 id="五、多参数默认值" tabindex="-1"><a class="header-anchor" href="#五、多参数默认值"><span>五、多参数默认值</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#include &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">using</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> namespace</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> b=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  result</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (result);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 局部变量声明</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 调用函数来添加值</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   result</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">a,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   cout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;&lt; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;Total value is :&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;&lt; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;&lt; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">endl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   // 再次调用函数</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   result = sum(a);</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   cout &lt;&lt; &quot;Total value is :&quot; &lt;&lt; result &lt;&lt; endl;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   return 0;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、lambda-函数和表达式" tabindex="-1"><a class="header-anchor" href="#六、lambda-函数和表达式"><span>六、Lambda 函数和表达式</span></a></h2><p>?</p>`,13)]))}const d=i(e,[["render",t],["__file","function.html.vue"]]),r=JSON.parse('{"path":"/c/base/function.html","title":"【第五篇章】 函数","lang":"zh-CN","frontmatter":{"title":"【第五篇章】 函数","index":false,"isOriginal":true,"category":"c++","tag":"c++","date":"2025-02-12T00:00:00.000Z","description":"一、函数 函数是一组一起执行一个任务的语句，每个 c++ 程序至少有一个函数，即主函数 main()，所有简单的程序都可以定义其他额外的函数。 函数声明告诉编译器函数的名称、返回类型、参数。函数定义提供了函数的实际主体。 二、声明函数 三、调用函数 四、函数参数 如果函数要实用参数，则必须声明接收参数值的变量。这些变量称为函数的形式参数。形式参数就像函...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/c/base/function.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"【第五篇章】 函数"}],["meta",{"property":"og:description","content":"一、函数 函数是一组一起执行一个任务的语句，每个 c++ 程序至少有一个函数，即主函数 main()，所有简单的程序都可以定义其他额外的函数。 函数声明告诉编译器函数的名称、返回类型、参数。函数定义提供了函数的实际主体。 二、声明函数 三、调用函数 四、函数参数 如果函数要实用参数，则必须声明接收参数值的变量。这些变量称为函数的形式参数。形式参数就像函..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-12T03:25:35.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"c++"}],["meta",{"property":"article:published_time","content":"2025-02-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-12T03:25:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【第五篇章】 函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-12T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-12T03:25:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、函数","slug":"一、函数","link":"#一、函数","children":[]},{"level":2,"title":"二、声明函数","slug":"二、声明函数","link":"#二、声明函数","children":[]},{"level":2,"title":"三、调用函数","slug":"三、调用函数","link":"#三、调用函数","children":[]},{"level":2,"title":"四、函数参数","slug":"四、函数参数","link":"#四、函数参数","children":[]},{"level":2,"title":"五、多参数默认值","slug":"五、多参数默认值","link":"#五、多参数默认值","children":[]},{"level":2,"title":"六、Lambda 函数和表达式","slug":"六、lambda-函数和表达式","link":"#六、lambda-函数和表达式","children":[]}],"git":{"createdTime":1739330735000,"updatedTime":1739330735000,"contributors":[{"name":"tsing-dong","email":"ld320321@163.com","commits":1}]},"readingTime":{"minutes":1.9,"words":571},"filePathRelative":"c/base/function.md","localizedDate":"2025年2月12日","excerpt":"<h2>一、函数</h2>\\n<p>函数是一组一起执行一个任务的语句，每个 c++ 程序至少有一个函数，即主函数 <code>main()</code>，所有简单的程序都可以定义其他额外的函数。\\n函数声明告诉编译器函数的名称、返回类型、参数。函数定义提供了函数的实际主体。</p>\\n<h2>二、声明函数</h2>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">return_type</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> function_name</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">( </span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">paramter</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> list</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">  body</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> of</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> the</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> function</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,r as data};
