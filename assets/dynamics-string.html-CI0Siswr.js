import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as e,a as t}from"./app-CG918EWt.js";const a="/backend-book/assets/dynamics-string-BdGKF9-3.jpg",n={},l=t('<h2 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述"><span>一、概述</span></a></h2><p>string 类型底层实现的简单动态字符串 sds，是可以修改的字符串。它采用预分配冗余空间的方式来减少内存的频繁分配。</p><h2 id="二、sds动态字符串" tabindex="-1"><a class="header-anchor" href="#二、sds动态字符串"><span>二、SDS动态字符串</span></a></h2><figure><img src="'+a+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>动态字符串</code> 是以 <strong>\\0</strong> 为分隔符。<code>最大容量</code> 是 redis 主动分配的一块内存空间，<code>实际存储内容</code> 是具体的存的数据。</p><h2 id="三、sds-动态字符串-与-c语言-字符串的区别" tabindex="-1"><a class="header-anchor" href="#三、sds-动态字符串-与-c语言-字符串的区别"><span>三、SDS（动态字符串）与 c语言 字符串的区别</span></a></h2><p>1、获取存储长度不同</p><p><code>c语言：</code>c语言不记录长度信息，如果要获取字符串的长度，需要遍历所有的字符串，才能获取字符串的长度。获取长度的复杂度为 <strong>O(n)</strong>。</p><p><code>sds（动态字符串）：</code>sds存储了字符串的长度，获取长度的复杂度为 <strong>O(1)</strong>。</p><p>2、缓存溢出</p><p><code>c语言：</code>c语言不记录长度，在执行strcat函数时，假设分配了内存，存储的内容比已经分配的内存多时，这个时候就会出现缓冲区溢出现象。</p><p><code>sds（动态字符串）：</code>sds存储内容时，先检查内容的存储是否能够存储下实际的值，如果不能存储实际的值，就先扩展缓存区域，再将值存储到缓冲区域中。</p><p>3、内存的开辟和释放</p><p><code>c语言：</code>需要自己主动释放或者扩展内存，如果不能够主动释放或者扩展内存，就会出现缓冲溢出或者泄露。<br><code>sds（动态字符串）：</code>sds采取下面的方式</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 空间预分配 先进行内存区域进行扩展,然后在执行下面的代码</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  test</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(len </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 1M){</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //程序分配和len属性一样的大小未使用的空间。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (len </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 1M){</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //程序分配1M 未使用的空间。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 惰性空间释放 </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 在修改字符串时，如果实际的内容要比老的数据小，先不将缓冲区的空闲内存释放掉，等下次存储内容时再进行空间的释放或者扩展。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、二进制安全</p><p><code>c语言：</code>C语言必须存储指定的格式数据。<br><code>sds（动态字符串）：</code>SDS不会对数据限制。</p>`,17),d=[l];function r(c,p){return e(),i("div",null,d)}const k=s(n,[["render",r],["__file","dynamics-string.html.vue"]]),g=JSON.parse('{"path":"/database/redis/dynamics-string.html","title":"【第七篇章】动态字符串","lang":"zh-CN","frontmatter":{"title":"【第七篇章】动态字符串","index":false,"isOriginal":true,"category":"数据库","tag":"redis","date":"2024-08-03T00:00:00.000Z","description":"一、概述 string 类型底层实现的简单动态字符串 sds，是可以修改的字符串。它采用预分配冗余空间的方式来减少内存的频繁分配。 二、SDS动态字符串 动态字符串 是以 \\\\0 为分隔符。最大容量 是 redis 主动分配的一块内存空间，实际存储内容 是具体的存的数据。 三、SDS（动态字符串）与 c语言 字符串的区别 1、获取存储长度不同 c语言：c...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/backend-book/database/redis/dynamics-string.html"}],["meta",{"property":"og:site_name","content":"极速蜗牛"}],["meta",{"property":"og:title","content":"【第七篇章】动态字符串"}],["meta",{"property":"og:description","content":"一、概述 string 类型底层实现的简单动态字符串 sds，是可以修改的字符串。它采用预分配冗余空间的方式来减少内存的频繁分配。 二、SDS动态字符串 动态字符串 是以 \\\\0 为分隔符。最大容量 是 redis 主动分配的一块内存空间，实际存储内容 是具体的存的数据。 三、SDS（动态字符串）与 c语言 字符串的区别 1、获取存储长度不同 c语言：c..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-04T06:26:54.000Z"}],["meta",{"property":"article:author","content":"青衣"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:published_time","content":"2024-08-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-04T06:26:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【第七篇章】动态字符串\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-04T06:26:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"青衣\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、概述","slug":"一、概述","link":"#一、概述","children":[]},{"level":2,"title":"二、SDS动态字符串","slug":"二、sds动态字符串","link":"#二、sds动态字符串","children":[]},{"level":2,"title":"三、SDS（动态字符串）与 c语言 字符串的区别","slug":"三、sds-动态字符串-与-c语言-字符串的区别","link":"#三、sds-动态字符串-与-c语言-字符串的区别","children":[]}],"git":{"createdTime":1722665874000,"updatedTime":1722752814000,"contributors":[{"name":"Tsing","email":"ld320321@163.com","commits":2}]},"readingTime":{"minutes":1.97,"words":592},"filePathRelative":"database/redis/dynamics-string.md","localizedDate":"2024年8月3日","excerpt":"<h2>一、概述</h2>\\n<p>string 类型底层实现的简单动态字符串 sds，是可以修改的字符串。它采用预分配冗余空间的方式来减少内存的频繁分配。</p>\\n<h2>二、SDS动态字符串</h2>\\n<figure><figcaption></figcaption></figure>\\n<p><code>动态字符串</code> 是以 <strong>\\\\0</strong> 为分隔符。<code>最大容量</code> 是 redis 主动分配的一块内存空间，<code>实际存储内容</code> 是具体的存的数据。</p>\\n<h2>三、SDS（动态字符串）与 c语言 字符串的区别</h2>","autoDesc":true}');export{k as comp,g as data};
